@model VaultLifeAdmin.ViewModels.ProductViewModel
@{
    ViewBag.Title = "Home Page";
}

<div class="jumbotron">
    <form action="SaveUploadedFile" method="post" enctype="multipart/form-data" class="dropzone" id="dropzoneForm">
        <div class="dropzone-previews"></div> <!-- this is were the previews should be shown. -->
        <div class="fallback">
            <input name="file" type="file" multiple />
            <input type="submit" value="Upload" />
        </div>
        <!-- Now setup your input fields -->
  <input type="email" name="username" />
  <input type="password" name="password" />

  <button type="submit" class="clickMe">Submit data and files!</button>
    </form>
</div>

<style type="text/css">
    .dz-max-files-reached {
        background-color: red;
    }
</style>
@section scripts{

    <script type="text/javascript">

        //File Upload response from the server
        Dropzone.options.dropzoneForm = {

            // The configuration we've talked about above
            autoProcessQueue: false,
            uploadMultiple: true,
            parallelUploads: 100,
            maxFiles: 100,

            maxFiles: 5,
            init: function () {

                var myDropzone = this;

                // First change the button to actually tell Dropzone to process the queue.
                this.element.querySelector(".clickMe").addEventListener("click", function (e) {
                    debugger;
                    // Make sure that the form isn't actually being sent.
                    e.preventDefault();
                    e.stopPropagation();
                    myDropzone.processQueue();
                });

                this.on("maxfilesexceeded", function (data) {
                    var res = eval('(' + data.xhr.responseText + ')');

                });
                this.on("addedfile", function (file) {

                    // Create the remove button
                    var removeButton = Dropzone.createElement("<button>Remove file</button>");


                    // Capture the Dropzone instance as closure.
                    var _this = this;

                    // Listen to the click event
                    removeButton.addEventListener("click", function (e) {
                        // Make sure the button click doesn't submit the form:
                        e.preventDefault();
                        e.stopPropagation();
                        // Remove the file preview.
                        _this.removeFile(file);
                        // If you want to the delete the file on the server as well,
                        // you can do the AJAX request here.
                    });

                    // Add the button to the file preview element.
                    file.previewElement.appendChild(removeButton);
                });
            }
        };






    </script>
}