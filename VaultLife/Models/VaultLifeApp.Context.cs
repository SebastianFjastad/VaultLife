//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Vaultlife.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class VaultLifeApplicationEntities : DbContext
    {
        public VaultLifeApplicationEntities()
            : base("name=VaultLifeApplicationEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Address> Addresses { get; set; }
        public virtual DbSet<AspNetRole> AspNetRoles { get; set; }
        public virtual DbSet<AspNetUserClaim> AspNetUserClaims { get; set; }
        public virtual DbSet<AspNetUserLogin> AspNetUserLogins { get; set; }
        public virtual DbSet<AspNetUser> AspNetUsers { get; set; }
        public virtual DbSet<Contract> Contracts { get; set; }
        public virtual DbSet<CountryState> CountryStates { get; set; }
        public virtual DbSet<DisplayItem> DisplayItems { get; set; }
        public virtual DbSet<Event> Events { get; set; }
        public virtual DbSet<Game> Games { get; set; }
        public virtual DbSet<GameSchedule> GameSchedules { get; set; }
        public virtual DbSet<GameType> GameTypes { get; set; }
        public virtual DbSet<GameTypeOwned> GameTypeOwneds { get; set; }
        public virtual DbSet<InteractionType> InteractionTypes { get; set; }
        public virtual DbSet<Member> Members { get; set; }
        public virtual DbSet<MemberAcquisitionCampaign> MemberAcquisitionCampaigns { get; set; }
        public virtual DbSet<MemberAtEvent> MemberAtEvents { get; set; }
        public virtual DbSet<MemberInGame> MemberInGames { get; set; }
        public virtual DbSet<MemberInterest> MemberInterests { get; set; }
        public virtual DbSet<MemberOwned> MemberOwneds { get; set; }
        public virtual DbSet<MemberSubscriptionType> MemberSubscriptionTypes { get; set; }
        public virtual DbSet<NextGame> NextGames { get; set; }
        public virtual DbSet<Owner> Owners { get; set; }
        public virtual DbSet<Product> Products { get; set; }
        public virtual DbSet<ProductCategory> ProductCategories { get; set; }
        public virtual DbSet<ProductInCategory> ProductInCategories { get; set; }
        public virtual DbSet<ProductInWatchList> ProductInWatchLists { get; set; }
        public virtual DbSet<ProductPlayed> ProductPlayeds { get; set; }
        public virtual DbSet<SerialNumber> SerialNumbers { get; set; }
        public virtual DbSet<sysdiagram> sysdiagrams { get; set; }
        public virtual DbSet<Territory> Territories { get; set; }
        public virtual DbSet<TerritoryDefinition> TerritoryDefinitions { get; set; }
        public virtual DbSet<Voucher> Vouchers { get; set; }
        public virtual DbSet<WebsiteInteraction> WebsiteInteractions { get; set; }
        public virtual DbSet<ProductProvider> ProductProviders { get; set; }
        public virtual DbSet<ProductLocation> ProductLocations { get; set; }
        public virtual DbSet<Country> Countries { get; set; }
        public virtual DbSet<Currency> Currencies { get; set; }
        public virtual DbSet<Language> Languages { get; set; }
        public virtual DbSet<LanguageItem> LanguageItems { get; set; }
        public virtual DbSet<CountryCity> CountryCities { get; set; }
        public virtual DbSet<GameInteraction> GameInteractions { get; set; }
        public virtual DbSet<PaymentConfiguration> PaymentConfigurations { get; set; }
        public virtual DbSet<PaymentTransaction> PaymentTransactions { get; set; }
        public virtual DbSet<ResponseCatalog> ResponseCatalogs { get; set; }
        public virtual DbSet<PlayableGamesByMember> PlayableGamesByMembers { get; set; }
        public virtual DbSet<ProductInfo> ProductInfoes { get; set; }
        public virtual DbSet<GameMemberFilter> GameMemberFilters { get; set; }
        public virtual DbSet<ProductInGame> ProductInGames { get; set; }
        public virtual DbSet<TrackingTransaction> TrackingTransactions { get; set; }
        public virtual DbSet<GameTemplate> GameTemplates { get; set; }
        public virtual DbSet<GameRule> GameRules { get; set; }
        public virtual DbSet<Email> Emails { get; set; }
        public virtual DbSet<EmailConfig> EmailConfigs { get; set; }
        public virtual DbSet<EmailErrorLog> EmailErrorLogs { get; set; }
        public virtual DbSet<EmailSendLog> EmailSendLogs { get; set; }
        public virtual DbSet<Imagedetail> Imagedetails { get; set; }
        public virtual DbSet<getRecentSale> getRecentSales { get; set; }
        public virtual DbSet<ImageType> ImageTypes { get; set; }
        public virtual DbSet<MembersWhoPlayed> MembersWhoPlayeds { get; set; }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    
        public virtual int usp_AddressDelete(Nullable<int> addressID)
        {
            var addressIDParameter = addressID.HasValue ?
                new ObjectParameter("AddressID", addressID) :
                new ObjectParameter("AddressID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_AddressDelete", addressIDParameter);
        }
    
        public virtual ObjectResult<usp_AddressInsert_Result> usp_AddressInsert(string addressType, string addressLine1, string addressLine2, string addressLine3, string country, string stateOrProvince, string zipOrPostalCode, Nullable<System.DateTime> dateInserted, Nullable<System.DateTime> dateUpdated, string uSR)
        {
            var addressTypeParameter = addressType != null ?
                new ObjectParameter("AddressType", addressType) :
                new ObjectParameter("AddressType", typeof(string));
    
            var addressLine1Parameter = addressLine1 != null ?
                new ObjectParameter("AddressLine1", addressLine1) :
                new ObjectParameter("AddressLine1", typeof(string));
    
            var addressLine2Parameter = addressLine2 != null ?
                new ObjectParameter("AddressLine2", addressLine2) :
                new ObjectParameter("AddressLine2", typeof(string));
    
            var addressLine3Parameter = addressLine3 != null ?
                new ObjectParameter("AddressLine3", addressLine3) :
                new ObjectParameter("AddressLine3", typeof(string));
    
            var countryParameter = country != null ?
                new ObjectParameter("Country", country) :
                new ObjectParameter("Country", typeof(string));
    
            var stateOrProvinceParameter = stateOrProvince != null ?
                new ObjectParameter("StateOrProvince", stateOrProvince) :
                new ObjectParameter("StateOrProvince", typeof(string));
    
            var zipOrPostalCodeParameter = zipOrPostalCode != null ?
                new ObjectParameter("ZipOrPostalCode", zipOrPostalCode) :
                new ObjectParameter("ZipOrPostalCode", typeof(string));
    
            var dateInsertedParameter = dateInserted.HasValue ?
                new ObjectParameter("DateInserted", dateInserted) :
                new ObjectParameter("DateInserted", typeof(System.DateTime));
    
            var dateUpdatedParameter = dateUpdated.HasValue ?
                new ObjectParameter("DateUpdated", dateUpdated) :
                new ObjectParameter("DateUpdated", typeof(System.DateTime));
    
            var uSRParameter = uSR != null ?
                new ObjectParameter("USR", uSR) :
                new ObjectParameter("USR", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_AddressInsert_Result>("usp_AddressInsert", addressTypeParameter, addressLine1Parameter, addressLine2Parameter, addressLine3Parameter, countryParameter, stateOrProvinceParameter, zipOrPostalCodeParameter, dateInsertedParameter, dateUpdatedParameter, uSRParameter);
        }
    
        public virtual ObjectResult<usp_AddressSelect_Result> usp_AddressSelect(Nullable<int> addressID)
        {
            var addressIDParameter = addressID.HasValue ?
                new ObjectParameter("AddressID", addressID) :
                new ObjectParameter("AddressID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_AddressSelect_Result>("usp_AddressSelect", addressIDParameter);
        }
    
        public virtual ObjectResult<usp_AddressUpdate_Result> usp_AddressUpdate(Nullable<int> addressID, string addressType, string addressLine1, string addressLine2, string addressLine3, string country, string stateOrProvince, string zipOrPostalCode, Nullable<System.DateTime> dateInserted, Nullable<System.DateTime> dateUpdated, string uSR)
        {
            var addressIDParameter = addressID.HasValue ?
                new ObjectParameter("AddressID", addressID) :
                new ObjectParameter("AddressID", typeof(int));
    
            var addressTypeParameter = addressType != null ?
                new ObjectParameter("AddressType", addressType) :
                new ObjectParameter("AddressType", typeof(string));
    
            var addressLine1Parameter = addressLine1 != null ?
                new ObjectParameter("AddressLine1", addressLine1) :
                new ObjectParameter("AddressLine1", typeof(string));
    
            var addressLine2Parameter = addressLine2 != null ?
                new ObjectParameter("AddressLine2", addressLine2) :
                new ObjectParameter("AddressLine2", typeof(string));
    
            var addressLine3Parameter = addressLine3 != null ?
                new ObjectParameter("AddressLine3", addressLine3) :
                new ObjectParameter("AddressLine3", typeof(string));
    
            var countryParameter = country != null ?
                new ObjectParameter("Country", country) :
                new ObjectParameter("Country", typeof(string));
    
            var stateOrProvinceParameter = stateOrProvince != null ?
                new ObjectParameter("StateOrProvince", stateOrProvince) :
                new ObjectParameter("StateOrProvince", typeof(string));
    
            var zipOrPostalCodeParameter = zipOrPostalCode != null ?
                new ObjectParameter("ZipOrPostalCode", zipOrPostalCode) :
                new ObjectParameter("ZipOrPostalCode", typeof(string));
    
            var dateInsertedParameter = dateInserted.HasValue ?
                new ObjectParameter("DateInserted", dateInserted) :
                new ObjectParameter("DateInserted", typeof(System.DateTime));
    
            var dateUpdatedParameter = dateUpdated.HasValue ?
                new ObjectParameter("DateUpdated", dateUpdated) :
                new ObjectParameter("DateUpdated", typeof(System.DateTime));
    
            var uSRParameter = uSR != null ?
                new ObjectParameter("USR", uSR) :
                new ObjectParameter("USR", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_AddressUpdate_Result>("usp_AddressUpdate", addressIDParameter, addressTypeParameter, addressLine1Parameter, addressLine2Parameter, addressLine3Parameter, countryParameter, stateOrProvinceParameter, zipOrPostalCodeParameter, dateInsertedParameter, dateUpdatedParameter, uSRParameter);
        }
    
        public virtual int usp_ContractDelete(Nullable<int> contractID)
        {
            var contractIDParameter = contractID.HasValue ?
                new ObjectParameter("ContractID", contractID) :
                new ObjectParameter("ContractID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_ContractDelete", contractIDParameter);
        }
    
        public virtual ObjectResult<usp_ContractInsert_Result> usp_ContractInsert(Nullable<int> contractID, string contractCode, string contractDetail, Nullable<System.DateTime> dateInserted, Nullable<System.DateTime> dateUpdated, string uSR)
        {
            var contractIDParameter = contractID.HasValue ?
                new ObjectParameter("ContractID", contractID) :
                new ObjectParameter("ContractID", typeof(int));
    
            var contractCodeParameter = contractCode != null ?
                new ObjectParameter("ContractCode", contractCode) :
                new ObjectParameter("ContractCode", typeof(string));
    
            var contractDetailParameter = contractDetail != null ?
                new ObjectParameter("ContractDetail", contractDetail) :
                new ObjectParameter("ContractDetail", typeof(string));
    
            var dateInsertedParameter = dateInserted.HasValue ?
                new ObjectParameter("DateInserted", dateInserted) :
                new ObjectParameter("DateInserted", typeof(System.DateTime));
    
            var dateUpdatedParameter = dateUpdated.HasValue ?
                new ObjectParameter("DateUpdated", dateUpdated) :
                new ObjectParameter("DateUpdated", typeof(System.DateTime));
    
            var uSRParameter = uSR != null ?
                new ObjectParameter("USR", uSR) :
                new ObjectParameter("USR", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_ContractInsert_Result>("usp_ContractInsert", contractIDParameter, contractCodeParameter, contractDetailParameter, dateInsertedParameter, dateUpdatedParameter, uSRParameter);
        }
    
        public virtual ObjectResult<usp_ContractSelect_Result> usp_ContractSelect(Nullable<int> contractID)
        {
            var contractIDParameter = contractID.HasValue ?
                new ObjectParameter("ContractID", contractID) :
                new ObjectParameter("ContractID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_ContractSelect_Result>("usp_ContractSelect", contractIDParameter);
        }
    
        public virtual ObjectResult<usp_ContractUpdate_Result> usp_ContractUpdate(Nullable<int> contractID, string contractCode, string contractDetail, Nullable<System.DateTime> dateInserted, Nullable<System.DateTime> dateUpdated, string uSR)
        {
            var contractIDParameter = contractID.HasValue ?
                new ObjectParameter("ContractID", contractID) :
                new ObjectParameter("ContractID", typeof(int));
    
            var contractCodeParameter = contractCode != null ?
                new ObjectParameter("ContractCode", contractCode) :
                new ObjectParameter("ContractCode", typeof(string));
    
            var contractDetailParameter = contractDetail != null ?
                new ObjectParameter("ContractDetail", contractDetail) :
                new ObjectParameter("ContractDetail", typeof(string));
    
            var dateInsertedParameter = dateInserted.HasValue ?
                new ObjectParameter("DateInserted", dateInserted) :
                new ObjectParameter("DateInserted", typeof(System.DateTime));
    
            var dateUpdatedParameter = dateUpdated.HasValue ?
                new ObjectParameter("DateUpdated", dateUpdated) :
                new ObjectParameter("DateUpdated", typeof(System.DateTime));
    
            var uSRParameter = uSR != null ?
                new ObjectParameter("USR", uSR) :
                new ObjectParameter("USR", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_ContractUpdate_Result>("usp_ContractUpdate", contractIDParameter, contractCodeParameter, contractDetailParameter, dateInsertedParameter, dateUpdatedParameter, uSRParameter);
        }
    
        public virtual int usp_EventDelete(Nullable<int> eventID)
        {
            var eventIDParameter = eventID.HasValue ?
                new ObjectParameter("EventID", eventID) :
                new ObjectParameter("EventID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_EventDelete", eventIDParameter);
        }
    
        public virtual ObjectResult<usp_EventInsert_Result> usp_EventInsert(string eventCode, string eventName, string eventDescription, Nullable<System.DateTime> eventDate, Nullable<System.DateTime> dateInserted, Nullable<System.DateTime> dateUpdated, string uSR)
        {
            var eventCodeParameter = eventCode != null ?
                new ObjectParameter("EventCode", eventCode) :
                new ObjectParameter("EventCode", typeof(string));
    
            var eventNameParameter = eventName != null ?
                new ObjectParameter("EventName", eventName) :
                new ObjectParameter("EventName", typeof(string));
    
            var eventDescriptionParameter = eventDescription != null ?
                new ObjectParameter("EventDescription", eventDescription) :
                new ObjectParameter("EventDescription", typeof(string));
    
            var eventDateParameter = eventDate.HasValue ?
                new ObjectParameter("EventDate", eventDate) :
                new ObjectParameter("EventDate", typeof(System.DateTime));
    
            var dateInsertedParameter = dateInserted.HasValue ?
                new ObjectParameter("DateInserted", dateInserted) :
                new ObjectParameter("DateInserted", typeof(System.DateTime));
    
            var dateUpdatedParameter = dateUpdated.HasValue ?
                new ObjectParameter("DateUpdated", dateUpdated) :
                new ObjectParameter("DateUpdated", typeof(System.DateTime));
    
            var uSRParameter = uSR != null ?
                new ObjectParameter("USR", uSR) :
                new ObjectParameter("USR", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_EventInsert_Result>("usp_EventInsert", eventCodeParameter, eventNameParameter, eventDescriptionParameter, eventDateParameter, dateInsertedParameter, dateUpdatedParameter, uSRParameter);
        }
    
        public virtual ObjectResult<usp_EventSelect_Result> usp_EventSelect(Nullable<int> eventID)
        {
            var eventIDParameter = eventID.HasValue ?
                new ObjectParameter("EventID", eventID) :
                new ObjectParameter("EventID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_EventSelect_Result>("usp_EventSelect", eventIDParameter);
        }
    
        public virtual ObjectResult<usp_EventUpdate_Result> usp_EventUpdate(Nullable<int> eventID, string eventCode, string eventName, string eventDescription, Nullable<System.DateTime> eventDate, Nullable<System.DateTime> dateInserted, Nullable<System.DateTime> dateUpdated, string uSR)
        {
            var eventIDParameter = eventID.HasValue ?
                new ObjectParameter("EventID", eventID) :
                new ObjectParameter("EventID", typeof(int));
    
            var eventCodeParameter = eventCode != null ?
                new ObjectParameter("EventCode", eventCode) :
                new ObjectParameter("EventCode", typeof(string));
    
            var eventNameParameter = eventName != null ?
                new ObjectParameter("EventName", eventName) :
                new ObjectParameter("EventName", typeof(string));
    
            var eventDescriptionParameter = eventDescription != null ?
                new ObjectParameter("EventDescription", eventDescription) :
                new ObjectParameter("EventDescription", typeof(string));
    
            var eventDateParameter = eventDate.HasValue ?
                new ObjectParameter("EventDate", eventDate) :
                new ObjectParameter("EventDate", typeof(System.DateTime));
    
            var dateInsertedParameter = dateInserted.HasValue ?
                new ObjectParameter("DateInserted", dateInserted) :
                new ObjectParameter("DateInserted", typeof(System.DateTime));
    
            var dateUpdatedParameter = dateUpdated.HasValue ?
                new ObjectParameter("DateUpdated", dateUpdated) :
                new ObjectParameter("DateUpdated", typeof(System.DateTime));
    
            var uSRParameter = uSR != null ?
                new ObjectParameter("USR", uSR) :
                new ObjectParameter("USR", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_EventUpdate_Result>("usp_EventUpdate", eventIDParameter, eventCodeParameter, eventNameParameter, eventDescriptionParameter, eventDateParameter, dateInsertedParameter, dateUpdatedParameter, uSRParameter);
        }
    
        public virtual int usp_GameDelete(Nullable<int> gameID)
        {
            var gameIDParameter = gameID.HasValue ?
                new ObjectParameter("GameID", gameID) :
                new ObjectParameter("GameID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_GameDelete", gameIDParameter);
        }
    
        public virtual ObjectResult<usp_GameInsert_Result> usp_GameInsert(string gameCode, Nullable<int> gameTypeID, string gameName, string gameDescription, Nullable<System.DateTime> dateInserted, Nullable<System.DateTime> dateUpdated, string uSR)
        {
            var gameCodeParameter = gameCode != null ?
                new ObjectParameter("GameCode", gameCode) :
                new ObjectParameter("GameCode", typeof(string));
    
            var gameTypeIDParameter = gameTypeID.HasValue ?
                new ObjectParameter("GameTypeID", gameTypeID) :
                new ObjectParameter("GameTypeID", typeof(int));
    
            var gameNameParameter = gameName != null ?
                new ObjectParameter("GameName", gameName) :
                new ObjectParameter("GameName", typeof(string));
    
            var gameDescriptionParameter = gameDescription != null ?
                new ObjectParameter("GameDescription", gameDescription) :
                new ObjectParameter("GameDescription", typeof(string));
    
            var dateInsertedParameter = dateInserted.HasValue ?
                new ObjectParameter("DateInserted", dateInserted) :
                new ObjectParameter("DateInserted", typeof(System.DateTime));
    
            var dateUpdatedParameter = dateUpdated.HasValue ?
                new ObjectParameter("DateUpdated", dateUpdated) :
                new ObjectParameter("DateUpdated", typeof(System.DateTime));
    
            var uSRParameter = uSR != null ?
                new ObjectParameter("USR", uSR) :
                new ObjectParameter("USR", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GameInsert_Result>("usp_GameInsert", gameCodeParameter, gameTypeIDParameter, gameNameParameter, gameDescriptionParameter, dateInsertedParameter, dateUpdatedParameter, uSRParameter);
        }
    
        public virtual int usp_GameRuleDelete(Nullable<int> gameRuleID)
        {
            var gameRuleIDParameter = gameRuleID.HasValue ?
                new ObjectParameter("GameRuleID", gameRuleID) :
                new ObjectParameter("GameRuleID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_GameRuleDelete", gameRuleIDParameter);
        }
    
        public virtual ObjectResult<usp_GameRuleInsert_Result> usp_GameRuleInsert(string gameRuleCode, Nullable<int> gameID, string filterCriteria, Nullable<int> schedule, Nullable<int> chainGameRuleID, string gameRuleDetail, Nullable<System.DateTime> dateInserted, Nullable<System.DateTime> dateUpdated, string uSR)
        {
            var gameRuleCodeParameter = gameRuleCode != null ?
                new ObjectParameter("GameRuleCode", gameRuleCode) :
                new ObjectParameter("GameRuleCode", typeof(string));
    
            var gameIDParameter = gameID.HasValue ?
                new ObjectParameter("GameID", gameID) :
                new ObjectParameter("GameID", typeof(int));
    
            var filterCriteriaParameter = filterCriteria != null ?
                new ObjectParameter("FilterCriteria", filterCriteria) :
                new ObjectParameter("FilterCriteria", typeof(string));
    
            var scheduleParameter = schedule.HasValue ?
                new ObjectParameter("Schedule", schedule) :
                new ObjectParameter("Schedule", typeof(int));
    
            var chainGameRuleIDParameter = chainGameRuleID.HasValue ?
                new ObjectParameter("ChainGameRuleID", chainGameRuleID) :
                new ObjectParameter("ChainGameRuleID", typeof(int));
    
            var gameRuleDetailParameter = gameRuleDetail != null ?
                new ObjectParameter("GameRuleDetail", gameRuleDetail) :
                new ObjectParameter("GameRuleDetail", typeof(string));
    
            var dateInsertedParameter = dateInserted.HasValue ?
                new ObjectParameter("DateInserted", dateInserted) :
                new ObjectParameter("DateInserted", typeof(System.DateTime));
    
            var dateUpdatedParameter = dateUpdated.HasValue ?
                new ObjectParameter("DateUpdated", dateUpdated) :
                new ObjectParameter("DateUpdated", typeof(System.DateTime));
    
            var uSRParameter = uSR != null ?
                new ObjectParameter("USR", uSR) :
                new ObjectParameter("USR", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GameRuleInsert_Result>("usp_GameRuleInsert", gameRuleCodeParameter, gameIDParameter, filterCriteriaParameter, scheduleParameter, chainGameRuleIDParameter, gameRuleDetailParameter, dateInsertedParameter, dateUpdatedParameter, uSRParameter);
        }
    
        public virtual ObjectResult<usp_GameRuleSelect_Result> usp_GameRuleSelect(Nullable<int> gameRuleID)
        {
            var gameRuleIDParameter = gameRuleID.HasValue ?
                new ObjectParameter("GameRuleID", gameRuleID) :
                new ObjectParameter("GameRuleID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GameRuleSelect_Result>("usp_GameRuleSelect", gameRuleIDParameter);
        }
    
        public virtual ObjectResult<usp_GameRuleUpdate_Result> usp_GameRuleUpdate(Nullable<int> gameRuleID, string gameRuleCode, Nullable<int> gameID, string filterCriteria, Nullable<int> schedule, Nullable<int> chainGameRuleID, string gameRuleDetail, Nullable<System.DateTime> dateInserted, Nullable<System.DateTime> dateUpdated, string uSR)
        {
            var gameRuleIDParameter = gameRuleID.HasValue ?
                new ObjectParameter("GameRuleID", gameRuleID) :
                new ObjectParameter("GameRuleID", typeof(int));
    
            var gameRuleCodeParameter = gameRuleCode != null ?
                new ObjectParameter("GameRuleCode", gameRuleCode) :
                new ObjectParameter("GameRuleCode", typeof(string));
    
            var gameIDParameter = gameID.HasValue ?
                new ObjectParameter("GameID", gameID) :
                new ObjectParameter("GameID", typeof(int));
    
            var filterCriteriaParameter = filterCriteria != null ?
                new ObjectParameter("FilterCriteria", filterCriteria) :
                new ObjectParameter("FilterCriteria", typeof(string));
    
            var scheduleParameter = schedule.HasValue ?
                new ObjectParameter("Schedule", schedule) :
                new ObjectParameter("Schedule", typeof(int));
    
            var chainGameRuleIDParameter = chainGameRuleID.HasValue ?
                new ObjectParameter("ChainGameRuleID", chainGameRuleID) :
                new ObjectParameter("ChainGameRuleID", typeof(int));
    
            var gameRuleDetailParameter = gameRuleDetail != null ?
                new ObjectParameter("GameRuleDetail", gameRuleDetail) :
                new ObjectParameter("GameRuleDetail", typeof(string));
    
            var dateInsertedParameter = dateInserted.HasValue ?
                new ObjectParameter("DateInserted", dateInserted) :
                new ObjectParameter("DateInserted", typeof(System.DateTime));
    
            var dateUpdatedParameter = dateUpdated.HasValue ?
                new ObjectParameter("DateUpdated", dateUpdated) :
                new ObjectParameter("DateUpdated", typeof(System.DateTime));
    
            var uSRParameter = uSR != null ?
                new ObjectParameter("USR", uSR) :
                new ObjectParameter("USR", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GameRuleUpdate_Result>("usp_GameRuleUpdate", gameRuleIDParameter, gameRuleCodeParameter, gameIDParameter, filterCriteriaParameter, scheduleParameter, chainGameRuleIDParameter, gameRuleDetailParameter, dateInsertedParameter, dateUpdatedParameter, uSRParameter);
        }
    
        public virtual int usp_GameScheduleDelete(Nullable<int> gameScheduleID)
        {
            var gameScheduleIDParameter = gameScheduleID.HasValue ?
                new ObjectParameter("GameScheduleID", gameScheduleID) :
                new ObjectParameter("GameScheduleID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_GameScheduleDelete", gameScheduleIDParameter);
        }
    
        public virtual ObjectResult<usp_GameScheduleInsert_Result> usp_GameScheduleInsert(Nullable<int> gameScheduleID, string gameScheduleCode, Nullable<System.DateTime> scheduledDateTime, Nullable<int> gameID, Nullable<int> sequenceNumber, Nullable<System.DateTime> dateInserted, Nullable<System.DateTime> dateUpdated, string uSR)
        {
            var gameScheduleIDParameter = gameScheduleID.HasValue ?
                new ObjectParameter("GameScheduleID", gameScheduleID) :
                new ObjectParameter("GameScheduleID", typeof(int));
    
            var gameScheduleCodeParameter = gameScheduleCode != null ?
                new ObjectParameter("GameScheduleCode", gameScheduleCode) :
                new ObjectParameter("GameScheduleCode", typeof(string));
    
            var scheduledDateTimeParameter = scheduledDateTime.HasValue ?
                new ObjectParameter("ScheduledDateTime", scheduledDateTime) :
                new ObjectParameter("ScheduledDateTime", typeof(System.DateTime));
    
            var gameIDParameter = gameID.HasValue ?
                new ObjectParameter("GameID", gameID) :
                new ObjectParameter("GameID", typeof(int));
    
            var sequenceNumberParameter = sequenceNumber.HasValue ?
                new ObjectParameter("SequenceNumber", sequenceNumber) :
                new ObjectParameter("SequenceNumber", typeof(int));
    
            var dateInsertedParameter = dateInserted.HasValue ?
                new ObjectParameter("DateInserted", dateInserted) :
                new ObjectParameter("DateInserted", typeof(System.DateTime));
    
            var dateUpdatedParameter = dateUpdated.HasValue ?
                new ObjectParameter("DateUpdated", dateUpdated) :
                new ObjectParameter("DateUpdated", typeof(System.DateTime));
    
            var uSRParameter = uSR != null ?
                new ObjectParameter("USR", uSR) :
                new ObjectParameter("USR", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GameScheduleInsert_Result>("usp_GameScheduleInsert", gameScheduleIDParameter, gameScheduleCodeParameter, scheduledDateTimeParameter, gameIDParameter, sequenceNumberParameter, dateInsertedParameter, dateUpdatedParameter, uSRParameter);
        }
    
        public virtual ObjectResult<usp_GameScheduleSelect_Result> usp_GameScheduleSelect(Nullable<int> gameScheduleID)
        {
            var gameScheduleIDParameter = gameScheduleID.HasValue ?
                new ObjectParameter("GameScheduleID", gameScheduleID) :
                new ObjectParameter("GameScheduleID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GameScheduleSelect_Result>("usp_GameScheduleSelect", gameScheduleIDParameter);
        }
    
        public virtual ObjectResult<usp_GameScheduleUpdate_Result> usp_GameScheduleUpdate(Nullable<int> gameScheduleID, string gameScheduleCode, Nullable<System.DateTime> scheduledDateTime, Nullable<int> gameID, Nullable<int> sequenceNumber, Nullable<System.DateTime> dateInserted, Nullable<System.DateTime> dateUpdated, string uSR)
        {
            var gameScheduleIDParameter = gameScheduleID.HasValue ?
                new ObjectParameter("GameScheduleID", gameScheduleID) :
                new ObjectParameter("GameScheduleID", typeof(int));
    
            var gameScheduleCodeParameter = gameScheduleCode != null ?
                new ObjectParameter("GameScheduleCode", gameScheduleCode) :
                new ObjectParameter("GameScheduleCode", typeof(string));
    
            var scheduledDateTimeParameter = scheduledDateTime.HasValue ?
                new ObjectParameter("ScheduledDateTime", scheduledDateTime) :
                new ObjectParameter("ScheduledDateTime", typeof(System.DateTime));
    
            var gameIDParameter = gameID.HasValue ?
                new ObjectParameter("GameID", gameID) :
                new ObjectParameter("GameID", typeof(int));
    
            var sequenceNumberParameter = sequenceNumber.HasValue ?
                new ObjectParameter("SequenceNumber", sequenceNumber) :
                new ObjectParameter("SequenceNumber", typeof(int));
    
            var dateInsertedParameter = dateInserted.HasValue ?
                new ObjectParameter("DateInserted", dateInserted) :
                new ObjectParameter("DateInserted", typeof(System.DateTime));
    
            var dateUpdatedParameter = dateUpdated.HasValue ?
                new ObjectParameter("DateUpdated", dateUpdated) :
                new ObjectParameter("DateUpdated", typeof(System.DateTime));
    
            var uSRParameter = uSR != null ?
                new ObjectParameter("USR", uSR) :
                new ObjectParameter("USR", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GameScheduleUpdate_Result>("usp_GameScheduleUpdate", gameScheduleIDParameter, gameScheduleCodeParameter, scheduledDateTimeParameter, gameIDParameter, sequenceNumberParameter, dateInsertedParameter, dateUpdatedParameter, uSRParameter);
        }
    
        public virtual ObjectResult<usp_GameSelect_Result> usp_GameSelect(Nullable<int> gameID)
        {
            var gameIDParameter = gameID.HasValue ?
                new ObjectParameter("GameID", gameID) :
                new ObjectParameter("GameID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GameSelect_Result>("usp_GameSelect", gameIDParameter);
        }
    
        public virtual int usp_GameTemplateDelete(Nullable<int> gameTemplateID)
        {
            var gameTemplateIDParameter = gameTemplateID.HasValue ?
                new ObjectParameter("GameTemplateID", gameTemplateID) :
                new ObjectParameter("GameTemplateID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_GameTemplateDelete", gameTemplateIDParameter);
        }
    
        public virtual ObjectResult<usp_GameTemplateInsert_Result> usp_GameTemplateInsert(Nullable<int> gameTemplateID, string gameTemplateCode, Nullable<int> gameTypeID, Nullable<int> gameRuleID, Nullable<System.DateTime> dateInserted, Nullable<System.DateTime> dateUpdated, string uSR)
        {
            var gameTemplateIDParameter = gameTemplateID.HasValue ?
                new ObjectParameter("GameTemplateID", gameTemplateID) :
                new ObjectParameter("GameTemplateID", typeof(int));
    
            var gameTemplateCodeParameter = gameTemplateCode != null ?
                new ObjectParameter("GameTemplateCode", gameTemplateCode) :
                new ObjectParameter("GameTemplateCode", typeof(string));
    
            var gameTypeIDParameter = gameTypeID.HasValue ?
                new ObjectParameter("GameTypeID", gameTypeID) :
                new ObjectParameter("GameTypeID", typeof(int));
    
            var gameRuleIDParameter = gameRuleID.HasValue ?
                new ObjectParameter("GameRuleID", gameRuleID) :
                new ObjectParameter("GameRuleID", typeof(int));
    
            var dateInsertedParameter = dateInserted.HasValue ?
                new ObjectParameter("DateInserted", dateInserted) :
                new ObjectParameter("DateInserted", typeof(System.DateTime));
    
            var dateUpdatedParameter = dateUpdated.HasValue ?
                new ObjectParameter("DateUpdated", dateUpdated) :
                new ObjectParameter("DateUpdated", typeof(System.DateTime));
    
            var uSRParameter = uSR != null ?
                new ObjectParameter("USR", uSR) :
                new ObjectParameter("USR", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GameTemplateInsert_Result>("usp_GameTemplateInsert", gameTemplateIDParameter, gameTemplateCodeParameter, gameTypeIDParameter, gameRuleIDParameter, dateInsertedParameter, dateUpdatedParameter, uSRParameter);
        }
    
        public virtual ObjectResult<usp_GameTemplateSelect_Result> usp_GameTemplateSelect(Nullable<int> gameTemplateID)
        {
            var gameTemplateIDParameter = gameTemplateID.HasValue ?
                new ObjectParameter("GameTemplateID", gameTemplateID) :
                new ObjectParameter("GameTemplateID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GameTemplateSelect_Result>("usp_GameTemplateSelect", gameTemplateIDParameter);
        }
    
        public virtual ObjectResult<usp_GameTemplateUpdate_Result> usp_GameTemplateUpdate(Nullable<int> gameTemplateID, string gameTemplateCode, Nullable<int> gameTypeID, Nullable<int> gameRuleID, Nullable<System.DateTime> dateInserted, Nullable<System.DateTime> dateUpdated, string uSR)
        {
            var gameTemplateIDParameter = gameTemplateID.HasValue ?
                new ObjectParameter("GameTemplateID", gameTemplateID) :
                new ObjectParameter("GameTemplateID", typeof(int));
    
            var gameTemplateCodeParameter = gameTemplateCode != null ?
                new ObjectParameter("GameTemplateCode", gameTemplateCode) :
                new ObjectParameter("GameTemplateCode", typeof(string));
    
            var gameTypeIDParameter = gameTypeID.HasValue ?
                new ObjectParameter("GameTypeID", gameTypeID) :
                new ObjectParameter("GameTypeID", typeof(int));
    
            var gameRuleIDParameter = gameRuleID.HasValue ?
                new ObjectParameter("GameRuleID", gameRuleID) :
                new ObjectParameter("GameRuleID", typeof(int));
    
            var dateInsertedParameter = dateInserted.HasValue ?
                new ObjectParameter("DateInserted", dateInserted) :
                new ObjectParameter("DateInserted", typeof(System.DateTime));
    
            var dateUpdatedParameter = dateUpdated.HasValue ?
                new ObjectParameter("DateUpdated", dateUpdated) :
                new ObjectParameter("DateUpdated", typeof(System.DateTime));
    
            var uSRParameter = uSR != null ?
                new ObjectParameter("USR", uSR) :
                new ObjectParameter("USR", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GameTemplateUpdate_Result>("usp_GameTemplateUpdate", gameTemplateIDParameter, gameTemplateCodeParameter, gameTypeIDParameter, gameRuleIDParameter, dateInsertedParameter, dateUpdatedParameter, uSRParameter);
        }
    
        public virtual int usp_GameTypeDelete(Nullable<int> gameTypeID)
        {
            var gameTypeIDParameter = gameTypeID.HasValue ?
                new ObjectParameter("GameTypeID", gameTypeID) :
                new ObjectParameter("GameTypeID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_GameTypeDelete", gameTypeIDParameter);
        }
    
        public virtual ObjectResult<usp_GameTypeInsert_Result> usp_GameTypeInsert(string gameTypeCode, string gameTypeName, string gameTypeDescription, Nullable<System.DateTime> dateInserted, Nullable<System.DateTime> dateUpdated, string uSR)
        {
            var gameTypeCodeParameter = gameTypeCode != null ?
                new ObjectParameter("GameTypeCode", gameTypeCode) :
                new ObjectParameter("GameTypeCode", typeof(string));
    
            var gameTypeNameParameter = gameTypeName != null ?
                new ObjectParameter("GameTypeName", gameTypeName) :
                new ObjectParameter("GameTypeName", typeof(string));
    
            var gameTypeDescriptionParameter = gameTypeDescription != null ?
                new ObjectParameter("GameTypeDescription", gameTypeDescription) :
                new ObjectParameter("GameTypeDescription", typeof(string));
    
            var dateInsertedParameter = dateInserted.HasValue ?
                new ObjectParameter("DateInserted", dateInserted) :
                new ObjectParameter("DateInserted", typeof(System.DateTime));
    
            var dateUpdatedParameter = dateUpdated.HasValue ?
                new ObjectParameter("DateUpdated", dateUpdated) :
                new ObjectParameter("DateUpdated", typeof(System.DateTime));
    
            var uSRParameter = uSR != null ?
                new ObjectParameter("USR", uSR) :
                new ObjectParameter("USR", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GameTypeInsert_Result>("usp_GameTypeInsert", gameTypeCodeParameter, gameTypeNameParameter, gameTypeDescriptionParameter, dateInsertedParameter, dateUpdatedParameter, uSRParameter);
        }
    
        public virtual int usp_GameTypeOwnedDelete(Nullable<int> gameTypeOwnedID)
        {
            var gameTypeOwnedIDParameter = gameTypeOwnedID.HasValue ?
                new ObjectParameter("GameTypeOwnedID", gameTypeOwnedID) :
                new ObjectParameter("GameTypeOwnedID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_GameTypeOwnedDelete", gameTypeOwnedIDParameter);
        }
    
        public virtual ObjectResult<usp_GameTypeOwnedInsert_Result> usp_GameTypeOwnedInsert(Nullable<int> gameTypeOwnedID, string gameTypeOwnedCode, Nullable<int> ownerID, Nullable<int> gameTypeID, Nullable<int> contractID, Nullable<System.DateTime> dateInserted, Nullable<System.DateTime> dateUpdated, string uSR)
        {
            var gameTypeOwnedIDParameter = gameTypeOwnedID.HasValue ?
                new ObjectParameter("GameTypeOwnedID", gameTypeOwnedID) :
                new ObjectParameter("GameTypeOwnedID", typeof(int));
    
            var gameTypeOwnedCodeParameter = gameTypeOwnedCode != null ?
                new ObjectParameter("GameTypeOwnedCode", gameTypeOwnedCode) :
                new ObjectParameter("GameTypeOwnedCode", typeof(string));
    
            var ownerIDParameter = ownerID.HasValue ?
                new ObjectParameter("OwnerID", ownerID) :
                new ObjectParameter("OwnerID", typeof(int));
    
            var gameTypeIDParameter = gameTypeID.HasValue ?
                new ObjectParameter("GameTypeID", gameTypeID) :
                new ObjectParameter("GameTypeID", typeof(int));
    
            var contractIDParameter = contractID.HasValue ?
                new ObjectParameter("ContractID", contractID) :
                new ObjectParameter("ContractID", typeof(int));
    
            var dateInsertedParameter = dateInserted.HasValue ?
                new ObjectParameter("DateInserted", dateInserted) :
                new ObjectParameter("DateInserted", typeof(System.DateTime));
    
            var dateUpdatedParameter = dateUpdated.HasValue ?
                new ObjectParameter("DateUpdated", dateUpdated) :
                new ObjectParameter("DateUpdated", typeof(System.DateTime));
    
            var uSRParameter = uSR != null ?
                new ObjectParameter("USR", uSR) :
                new ObjectParameter("USR", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GameTypeOwnedInsert_Result>("usp_GameTypeOwnedInsert", gameTypeOwnedIDParameter, gameTypeOwnedCodeParameter, ownerIDParameter, gameTypeIDParameter, contractIDParameter, dateInsertedParameter, dateUpdatedParameter, uSRParameter);
        }
    
        public virtual ObjectResult<usp_GameTypeOwnedSelect_Result> usp_GameTypeOwnedSelect(Nullable<int> gameTypeOwnedID)
        {
            var gameTypeOwnedIDParameter = gameTypeOwnedID.HasValue ?
                new ObjectParameter("GameTypeOwnedID", gameTypeOwnedID) :
                new ObjectParameter("GameTypeOwnedID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GameTypeOwnedSelect_Result>("usp_GameTypeOwnedSelect", gameTypeOwnedIDParameter);
        }
    
        public virtual ObjectResult<usp_GameTypeOwnedUpdate_Result> usp_GameTypeOwnedUpdate(Nullable<int> gameTypeOwnedID, string gameTypeOwnedCode, Nullable<int> ownerID, Nullable<int> gameTypeID, Nullable<int> contractID, Nullable<System.DateTime> dateInserted, Nullable<System.DateTime> dateUpdated, string uSR)
        {
            var gameTypeOwnedIDParameter = gameTypeOwnedID.HasValue ?
                new ObjectParameter("GameTypeOwnedID", gameTypeOwnedID) :
                new ObjectParameter("GameTypeOwnedID", typeof(int));
    
            var gameTypeOwnedCodeParameter = gameTypeOwnedCode != null ?
                new ObjectParameter("GameTypeOwnedCode", gameTypeOwnedCode) :
                new ObjectParameter("GameTypeOwnedCode", typeof(string));
    
            var ownerIDParameter = ownerID.HasValue ?
                new ObjectParameter("OwnerID", ownerID) :
                new ObjectParameter("OwnerID", typeof(int));
    
            var gameTypeIDParameter = gameTypeID.HasValue ?
                new ObjectParameter("GameTypeID", gameTypeID) :
                new ObjectParameter("GameTypeID", typeof(int));
    
            var contractIDParameter = contractID.HasValue ?
                new ObjectParameter("ContractID", contractID) :
                new ObjectParameter("ContractID", typeof(int));
    
            var dateInsertedParameter = dateInserted.HasValue ?
                new ObjectParameter("DateInserted", dateInserted) :
                new ObjectParameter("DateInserted", typeof(System.DateTime));
    
            var dateUpdatedParameter = dateUpdated.HasValue ?
                new ObjectParameter("DateUpdated", dateUpdated) :
                new ObjectParameter("DateUpdated", typeof(System.DateTime));
    
            var uSRParameter = uSR != null ?
                new ObjectParameter("USR", uSR) :
                new ObjectParameter("USR", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GameTypeOwnedUpdate_Result>("usp_GameTypeOwnedUpdate", gameTypeOwnedIDParameter, gameTypeOwnedCodeParameter, ownerIDParameter, gameTypeIDParameter, contractIDParameter, dateInsertedParameter, dateUpdatedParameter, uSRParameter);
        }
    
        public virtual ObjectResult<usp_GameTypeSelect_Result> usp_GameTypeSelect(Nullable<int> gameTypeID)
        {
            var gameTypeIDParameter = gameTypeID.HasValue ?
                new ObjectParameter("GameTypeID", gameTypeID) :
                new ObjectParameter("GameTypeID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GameTypeSelect_Result>("usp_GameTypeSelect", gameTypeIDParameter);
        }
    
        public virtual ObjectResult<usp_GameTypeUpdate_Result> usp_GameTypeUpdate(Nullable<int> gameTypeID, string gameTypeCode, string gameTypeName, string gameTypeDescription, Nullable<System.DateTime> dateInserted, Nullable<System.DateTime> dateUpdated, string uSR)
        {
            var gameTypeIDParameter = gameTypeID.HasValue ?
                new ObjectParameter("GameTypeID", gameTypeID) :
                new ObjectParameter("GameTypeID", typeof(int));
    
            var gameTypeCodeParameter = gameTypeCode != null ?
                new ObjectParameter("GameTypeCode", gameTypeCode) :
                new ObjectParameter("GameTypeCode", typeof(string));
    
            var gameTypeNameParameter = gameTypeName != null ?
                new ObjectParameter("GameTypeName", gameTypeName) :
                new ObjectParameter("GameTypeName", typeof(string));
    
            var gameTypeDescriptionParameter = gameTypeDescription != null ?
                new ObjectParameter("GameTypeDescription", gameTypeDescription) :
                new ObjectParameter("GameTypeDescription", typeof(string));
    
            var dateInsertedParameter = dateInserted.HasValue ?
                new ObjectParameter("DateInserted", dateInserted) :
                new ObjectParameter("DateInserted", typeof(System.DateTime));
    
            var dateUpdatedParameter = dateUpdated.HasValue ?
                new ObjectParameter("DateUpdated", dateUpdated) :
                new ObjectParameter("DateUpdated", typeof(System.DateTime));
    
            var uSRParameter = uSR != null ?
                new ObjectParameter("USR", uSR) :
                new ObjectParameter("USR", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GameTypeUpdate_Result>("usp_GameTypeUpdate", gameTypeIDParameter, gameTypeCodeParameter, gameTypeNameParameter, gameTypeDescriptionParameter, dateInsertedParameter, dateUpdatedParameter, uSRParameter);
        }
    
        public virtual ObjectResult<usp_GameUpdate_Result> usp_GameUpdate(Nullable<int> gameID, string gameCode, Nullable<int> gameTypeID, string gameName, string gameDescription, Nullable<System.DateTime> dateInserted, Nullable<System.DateTime> dateUpdated, string uSR)
        {
            var gameIDParameter = gameID.HasValue ?
                new ObjectParameter("GameID", gameID) :
                new ObjectParameter("GameID", typeof(int));
    
            var gameCodeParameter = gameCode != null ?
                new ObjectParameter("GameCode", gameCode) :
                new ObjectParameter("GameCode", typeof(string));
    
            var gameTypeIDParameter = gameTypeID.HasValue ?
                new ObjectParameter("GameTypeID", gameTypeID) :
                new ObjectParameter("GameTypeID", typeof(int));
    
            var gameNameParameter = gameName != null ?
                new ObjectParameter("GameName", gameName) :
                new ObjectParameter("GameName", typeof(string));
    
            var gameDescriptionParameter = gameDescription != null ?
                new ObjectParameter("GameDescription", gameDescription) :
                new ObjectParameter("GameDescription", typeof(string));
    
            var dateInsertedParameter = dateInserted.HasValue ?
                new ObjectParameter("DateInserted", dateInserted) :
                new ObjectParameter("DateInserted", typeof(System.DateTime));
    
            var dateUpdatedParameter = dateUpdated.HasValue ?
                new ObjectParameter("DateUpdated", dateUpdated) :
                new ObjectParameter("DateUpdated", typeof(System.DateTime));
    
            var uSRParameter = uSR != null ?
                new ObjectParameter("USR", uSR) :
                new ObjectParameter("USR", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GameUpdate_Result>("usp_GameUpdate", gameIDParameter, gameCodeParameter, gameTypeIDParameter, gameNameParameter, gameDescriptionParameter, dateInsertedParameter, dateUpdatedParameter, uSRParameter);
        }
    
        public virtual int usp_InteractionTypeDelete(Nullable<int> interactionTypeID)
        {
            var interactionTypeIDParameter = interactionTypeID.HasValue ?
                new ObjectParameter("InteractionTypeID", interactionTypeID) :
                new ObjectParameter("InteractionTypeID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_InteractionTypeDelete", interactionTypeIDParameter);
        }
    
        public virtual ObjectResult<usp_InteractionTypeInsert_Result> usp_InteractionTypeInsert(Nullable<int> interactionTypeID, string interactionTypeCode, string interactionTypeName, string interactionTypeDescription, Nullable<System.DateTime> dateInserted, Nullable<System.DateTime> dateUpdated, string uSR)
        {
            var interactionTypeIDParameter = interactionTypeID.HasValue ?
                new ObjectParameter("InteractionTypeID", interactionTypeID) :
                new ObjectParameter("InteractionTypeID", typeof(int));
    
            var interactionTypeCodeParameter = interactionTypeCode != null ?
                new ObjectParameter("InteractionTypeCode", interactionTypeCode) :
                new ObjectParameter("InteractionTypeCode", typeof(string));
    
            var interactionTypeNameParameter = interactionTypeName != null ?
                new ObjectParameter("InteractionTypeName", interactionTypeName) :
                new ObjectParameter("InteractionTypeName", typeof(string));
    
            var interactionTypeDescriptionParameter = interactionTypeDescription != null ?
                new ObjectParameter("InteractionTypeDescription", interactionTypeDescription) :
                new ObjectParameter("InteractionTypeDescription", typeof(string));
    
            var dateInsertedParameter = dateInserted.HasValue ?
                new ObjectParameter("DateInserted", dateInserted) :
                new ObjectParameter("DateInserted", typeof(System.DateTime));
    
            var dateUpdatedParameter = dateUpdated.HasValue ?
                new ObjectParameter("DateUpdated", dateUpdated) :
                new ObjectParameter("DateUpdated", typeof(System.DateTime));
    
            var uSRParameter = uSR != null ?
                new ObjectParameter("USR", uSR) :
                new ObjectParameter("USR", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_InteractionTypeInsert_Result>("usp_InteractionTypeInsert", interactionTypeIDParameter, interactionTypeCodeParameter, interactionTypeNameParameter, interactionTypeDescriptionParameter, dateInsertedParameter, dateUpdatedParameter, uSRParameter);
        }
    
        public virtual ObjectResult<usp_InteractionTypeSelect_Result> usp_InteractionTypeSelect(Nullable<int> interactionTypeID)
        {
            var interactionTypeIDParameter = interactionTypeID.HasValue ?
                new ObjectParameter("InteractionTypeID", interactionTypeID) :
                new ObjectParameter("InteractionTypeID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_InteractionTypeSelect_Result>("usp_InteractionTypeSelect", interactionTypeIDParameter);
        }
    
        public virtual ObjectResult<usp_InteractionTypeUpdate_Result> usp_InteractionTypeUpdate(Nullable<int> interactionTypeID, string interactionTypeCode, string interactionTypeName, string interactionTypeDescription, Nullable<System.DateTime> dateInserted, Nullable<System.DateTime> dateUpdated, string uSR)
        {
            var interactionTypeIDParameter = interactionTypeID.HasValue ?
                new ObjectParameter("InteractionTypeID", interactionTypeID) :
                new ObjectParameter("InteractionTypeID", typeof(int));
    
            var interactionTypeCodeParameter = interactionTypeCode != null ?
                new ObjectParameter("InteractionTypeCode", interactionTypeCode) :
                new ObjectParameter("InteractionTypeCode", typeof(string));
    
            var interactionTypeNameParameter = interactionTypeName != null ?
                new ObjectParameter("InteractionTypeName", interactionTypeName) :
                new ObjectParameter("InteractionTypeName", typeof(string));
    
            var interactionTypeDescriptionParameter = interactionTypeDescription != null ?
                new ObjectParameter("InteractionTypeDescription", interactionTypeDescription) :
                new ObjectParameter("InteractionTypeDescription", typeof(string));
    
            var dateInsertedParameter = dateInserted.HasValue ?
                new ObjectParameter("DateInserted", dateInserted) :
                new ObjectParameter("DateInserted", typeof(System.DateTime));
    
            var dateUpdatedParameter = dateUpdated.HasValue ?
                new ObjectParameter("DateUpdated", dateUpdated) :
                new ObjectParameter("DateUpdated", typeof(System.DateTime));
    
            var uSRParameter = uSR != null ?
                new ObjectParameter("USR", uSR) :
                new ObjectParameter("USR", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_InteractionTypeUpdate_Result>("usp_InteractionTypeUpdate", interactionTypeIDParameter, interactionTypeCodeParameter, interactionTypeNameParameter, interactionTypeDescriptionParameter, dateInsertedParameter, dateUpdatedParameter, uSRParameter);
        }
    
        public virtual int usp_MemberAcquisitionCampaignDelete(Nullable<int> memberAcquisitionCampaignID)
        {
            var memberAcquisitionCampaignIDParameter = memberAcquisitionCampaignID.HasValue ?
                new ObjectParameter("MemberAcquisitionCampaignID", memberAcquisitionCampaignID) :
                new ObjectParameter("MemberAcquisitionCampaignID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_MemberAcquisitionCampaignDelete", memberAcquisitionCampaignIDParameter);
        }
    
        public virtual ObjectResult<usp_MemberAcquisitionCampaignInsert_Result> usp_MemberAcquisitionCampaignInsert(Nullable<int> memberAcquisitionCampaignID, string memberAcquisitionCampaignCode, Nullable<int> ownerID, Nullable<int> contractID, string memberAcquisitionCampaignName, string memberAcquisitionCampaignDescription, Nullable<System.DateTime> dateInserted, Nullable<System.DateTime> dateUpdated, string uSR)
        {
            var memberAcquisitionCampaignIDParameter = memberAcquisitionCampaignID.HasValue ?
                new ObjectParameter("MemberAcquisitionCampaignID", memberAcquisitionCampaignID) :
                new ObjectParameter("MemberAcquisitionCampaignID", typeof(int));
    
            var memberAcquisitionCampaignCodeParameter = memberAcquisitionCampaignCode != null ?
                new ObjectParameter("MemberAcquisitionCampaignCode", memberAcquisitionCampaignCode) :
                new ObjectParameter("MemberAcquisitionCampaignCode", typeof(string));
    
            var ownerIDParameter = ownerID.HasValue ?
                new ObjectParameter("OwnerID", ownerID) :
                new ObjectParameter("OwnerID", typeof(int));
    
            var contractIDParameter = contractID.HasValue ?
                new ObjectParameter("ContractID", contractID) :
                new ObjectParameter("ContractID", typeof(int));
    
            var memberAcquisitionCampaignNameParameter = memberAcquisitionCampaignName != null ?
                new ObjectParameter("MemberAcquisitionCampaignName", memberAcquisitionCampaignName) :
                new ObjectParameter("MemberAcquisitionCampaignName", typeof(string));
    
            var memberAcquisitionCampaignDescriptionParameter = memberAcquisitionCampaignDescription != null ?
                new ObjectParameter("MemberAcquisitionCampaignDescription", memberAcquisitionCampaignDescription) :
                new ObjectParameter("MemberAcquisitionCampaignDescription", typeof(string));
    
            var dateInsertedParameter = dateInserted.HasValue ?
                new ObjectParameter("DateInserted", dateInserted) :
                new ObjectParameter("DateInserted", typeof(System.DateTime));
    
            var dateUpdatedParameter = dateUpdated.HasValue ?
                new ObjectParameter("DateUpdated", dateUpdated) :
                new ObjectParameter("DateUpdated", typeof(System.DateTime));
    
            var uSRParameter = uSR != null ?
                new ObjectParameter("USR", uSR) :
                new ObjectParameter("USR", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_MemberAcquisitionCampaignInsert_Result>("usp_MemberAcquisitionCampaignInsert", memberAcquisitionCampaignIDParameter, memberAcquisitionCampaignCodeParameter, ownerIDParameter, contractIDParameter, memberAcquisitionCampaignNameParameter, memberAcquisitionCampaignDescriptionParameter, dateInsertedParameter, dateUpdatedParameter, uSRParameter);
        }
    
        public virtual ObjectResult<usp_MemberAcquisitionCampaignSelect_Result> usp_MemberAcquisitionCampaignSelect(Nullable<int> memberAcquisitionCampaignID)
        {
            var memberAcquisitionCampaignIDParameter = memberAcquisitionCampaignID.HasValue ?
                new ObjectParameter("MemberAcquisitionCampaignID", memberAcquisitionCampaignID) :
                new ObjectParameter("MemberAcquisitionCampaignID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_MemberAcquisitionCampaignSelect_Result>("usp_MemberAcquisitionCampaignSelect", memberAcquisitionCampaignIDParameter);
        }
    
        public virtual ObjectResult<usp_MemberAcquisitionCampaignUpdate_Result> usp_MemberAcquisitionCampaignUpdate(Nullable<int> memberAcquisitionCampaignID, string memberAcquisitionCampaignCode, Nullable<int> ownerID, Nullable<int> contractID, string memberAcquisitionCampaignName, string memberAcquisitionCampaignDescription, Nullable<System.DateTime> dateInserted, Nullable<System.DateTime> dateUpdated, string uSR)
        {
            var memberAcquisitionCampaignIDParameter = memberAcquisitionCampaignID.HasValue ?
                new ObjectParameter("MemberAcquisitionCampaignID", memberAcquisitionCampaignID) :
                new ObjectParameter("MemberAcquisitionCampaignID", typeof(int));
    
            var memberAcquisitionCampaignCodeParameter = memberAcquisitionCampaignCode != null ?
                new ObjectParameter("MemberAcquisitionCampaignCode", memberAcquisitionCampaignCode) :
                new ObjectParameter("MemberAcquisitionCampaignCode", typeof(string));
    
            var ownerIDParameter = ownerID.HasValue ?
                new ObjectParameter("OwnerID", ownerID) :
                new ObjectParameter("OwnerID", typeof(int));
    
            var contractIDParameter = contractID.HasValue ?
                new ObjectParameter("ContractID", contractID) :
                new ObjectParameter("ContractID", typeof(int));
    
            var memberAcquisitionCampaignNameParameter = memberAcquisitionCampaignName != null ?
                new ObjectParameter("MemberAcquisitionCampaignName", memberAcquisitionCampaignName) :
                new ObjectParameter("MemberAcquisitionCampaignName", typeof(string));
    
            var memberAcquisitionCampaignDescriptionParameter = memberAcquisitionCampaignDescription != null ?
                new ObjectParameter("MemberAcquisitionCampaignDescription", memberAcquisitionCampaignDescription) :
                new ObjectParameter("MemberAcquisitionCampaignDescription", typeof(string));
    
            var dateInsertedParameter = dateInserted.HasValue ?
                new ObjectParameter("DateInserted", dateInserted) :
                new ObjectParameter("DateInserted", typeof(System.DateTime));
    
            var dateUpdatedParameter = dateUpdated.HasValue ?
                new ObjectParameter("DateUpdated", dateUpdated) :
                new ObjectParameter("DateUpdated", typeof(System.DateTime));
    
            var uSRParameter = uSR != null ?
                new ObjectParameter("USR", uSR) :
                new ObjectParameter("USR", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_MemberAcquisitionCampaignUpdate_Result>("usp_MemberAcquisitionCampaignUpdate", memberAcquisitionCampaignIDParameter, memberAcquisitionCampaignCodeParameter, ownerIDParameter, contractIDParameter, memberAcquisitionCampaignNameParameter, memberAcquisitionCampaignDescriptionParameter, dateInsertedParameter, dateUpdatedParameter, uSRParameter);
        }
    
        public virtual int usp_MemberAtEventDelete(Nullable<int> memberID, Nullable<int> eventID)
        {
            var memberIDParameter = memberID.HasValue ?
                new ObjectParameter("MemberID", memberID) :
                new ObjectParameter("MemberID", typeof(int));
    
            var eventIDParameter = eventID.HasValue ?
                new ObjectParameter("EventID", eventID) :
                new ObjectParameter("EventID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_MemberAtEventDelete", memberIDParameter, eventIDParameter);
        }
    
        public virtual ObjectResult<usp_MemberAtEventInsert_Result> usp_MemberAtEventInsert(Nullable<int> memberID, Nullable<int> eventID, Nullable<System.DateTime> dateInserted, Nullable<System.DateTime> dateUpdated, string uSR)
        {
            var memberIDParameter = memberID.HasValue ?
                new ObjectParameter("MemberID", memberID) :
                new ObjectParameter("MemberID", typeof(int));
    
            var eventIDParameter = eventID.HasValue ?
                new ObjectParameter("EventID", eventID) :
                new ObjectParameter("EventID", typeof(int));
    
            var dateInsertedParameter = dateInserted.HasValue ?
                new ObjectParameter("DateInserted", dateInserted) :
                new ObjectParameter("DateInserted", typeof(System.DateTime));
    
            var dateUpdatedParameter = dateUpdated.HasValue ?
                new ObjectParameter("DateUpdated", dateUpdated) :
                new ObjectParameter("DateUpdated", typeof(System.DateTime));
    
            var uSRParameter = uSR != null ?
                new ObjectParameter("USR", uSR) :
                new ObjectParameter("USR", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_MemberAtEventInsert_Result>("usp_MemberAtEventInsert", memberIDParameter, eventIDParameter, dateInsertedParameter, dateUpdatedParameter, uSRParameter);
        }
    
        public virtual ObjectResult<usp_MemberAtEventSelect_Result> usp_MemberAtEventSelect(Nullable<int> memberID, Nullable<int> eventID)
        {
            var memberIDParameter = memberID.HasValue ?
                new ObjectParameter("MemberID", memberID) :
                new ObjectParameter("MemberID", typeof(int));
    
            var eventIDParameter = eventID.HasValue ?
                new ObjectParameter("EventID", eventID) :
                new ObjectParameter("EventID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_MemberAtEventSelect_Result>("usp_MemberAtEventSelect", memberIDParameter, eventIDParameter);
        }
    
        public virtual ObjectResult<usp_MemberAtEventUpdate_Result> usp_MemberAtEventUpdate(Nullable<int> memberID, Nullable<int> eventID, Nullable<System.DateTime> dateInserted, Nullable<System.DateTime> dateUpdated, string uSR)
        {
            var memberIDParameter = memberID.HasValue ?
                new ObjectParameter("MemberID", memberID) :
                new ObjectParameter("MemberID", typeof(int));
    
            var eventIDParameter = eventID.HasValue ?
                new ObjectParameter("EventID", eventID) :
                new ObjectParameter("EventID", typeof(int));
    
            var dateInsertedParameter = dateInserted.HasValue ?
                new ObjectParameter("DateInserted", dateInserted) :
                new ObjectParameter("DateInserted", typeof(System.DateTime));
    
            var dateUpdatedParameter = dateUpdated.HasValue ?
                new ObjectParameter("DateUpdated", dateUpdated) :
                new ObjectParameter("DateUpdated", typeof(System.DateTime));
    
            var uSRParameter = uSR != null ?
                new ObjectParameter("USR", uSR) :
                new ObjectParameter("USR", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_MemberAtEventUpdate_Result>("usp_MemberAtEventUpdate", memberIDParameter, eventIDParameter, dateInsertedParameter, dateUpdatedParameter, uSRParameter);
        }
    
        public virtual int usp_MemberDelete(Nullable<int> memberID)
        {
            var memberIDParameter = memberID.HasValue ?
                new ObjectParameter("MemberID", memberID) :
                new ObjectParameter("MemberID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_MemberDelete", memberIDParameter);
        }
    
        public virtual int usp_MemberInGameDelete(Nullable<int> gameID, Nullable<int> memberID)
        {
            var gameIDParameter = gameID.HasValue ?
                new ObjectParameter("GameID", gameID) :
                new ObjectParameter("GameID", typeof(int));
    
            var memberIDParameter = memberID.HasValue ?
                new ObjectParameter("MemberID", memberID) :
                new ObjectParameter("MemberID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_MemberInGameDelete", gameIDParameter, memberIDParameter);
        }
    
        public virtual ObjectResult<usp_MemberInGameInsert_Result> usp_MemberInGameInsert(Nullable<int> gameID, Nullable<int> memberID, Nullable<System.DateTime> dateInserted, Nullable<System.DateTime> dateUpdated, string uSR)
        {
            var gameIDParameter = gameID.HasValue ?
                new ObjectParameter("GameID", gameID) :
                new ObjectParameter("GameID", typeof(int));
    
            var memberIDParameter = memberID.HasValue ?
                new ObjectParameter("MemberID", memberID) :
                new ObjectParameter("MemberID", typeof(int));
    
            var dateInsertedParameter = dateInserted.HasValue ?
                new ObjectParameter("DateInserted", dateInserted) :
                new ObjectParameter("DateInserted", typeof(System.DateTime));
    
            var dateUpdatedParameter = dateUpdated.HasValue ?
                new ObjectParameter("DateUpdated", dateUpdated) :
                new ObjectParameter("DateUpdated", typeof(System.DateTime));
    
            var uSRParameter = uSR != null ?
                new ObjectParameter("USR", uSR) :
                new ObjectParameter("USR", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_MemberInGameInsert_Result>("usp_MemberInGameInsert", gameIDParameter, memberIDParameter, dateInsertedParameter, dateUpdatedParameter, uSRParameter);
        }
    
        public virtual ObjectResult<usp_MemberInGameSelect_Result> usp_MemberInGameSelect(Nullable<int> gameID, Nullable<int> memberID)
        {
            var gameIDParameter = gameID.HasValue ?
                new ObjectParameter("GameID", gameID) :
                new ObjectParameter("GameID", typeof(int));
    
            var memberIDParameter = memberID.HasValue ?
                new ObjectParameter("MemberID", memberID) :
                new ObjectParameter("MemberID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_MemberInGameSelect_Result>("usp_MemberInGameSelect", gameIDParameter, memberIDParameter);
        }
    
        public virtual ObjectResult<usp_MemberInGameUpdate_Result> usp_MemberInGameUpdate(Nullable<int> gameID, Nullable<int> memberID, Nullable<System.DateTime> dateInserted, Nullable<System.DateTime> dateUpdated, string uSR)
        {
            var gameIDParameter = gameID.HasValue ?
                new ObjectParameter("GameID", gameID) :
                new ObjectParameter("GameID", typeof(int));
    
            var memberIDParameter = memberID.HasValue ?
                new ObjectParameter("MemberID", memberID) :
                new ObjectParameter("MemberID", typeof(int));
    
            var dateInsertedParameter = dateInserted.HasValue ?
                new ObjectParameter("DateInserted", dateInserted) :
                new ObjectParameter("DateInserted", typeof(System.DateTime));
    
            var dateUpdatedParameter = dateUpdated.HasValue ?
                new ObjectParameter("DateUpdated", dateUpdated) :
                new ObjectParameter("DateUpdated", typeof(System.DateTime));
    
            var uSRParameter = uSR != null ?
                new ObjectParameter("USR", uSR) :
                new ObjectParameter("USR", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_MemberInGameUpdate_Result>("usp_MemberInGameUpdate", gameIDParameter, memberIDParameter, dateInsertedParameter, dateUpdatedParameter, uSRParameter);
        }
    
        public virtual int usp_MemberInsert(Nullable<int> memberSubscriptionTypeID, string memberCode, string identityType, string emailAddress, string telephoneHome, string telephoneOffice, string telephoneMobile, string gender, string ethnicity, Nullable<System.DateTime> dateOfBirth, Nullable<bool> activeIndicator, Nullable<System.DateTime> renewalDate, Nullable<int> addressID, Nullable<System.DateTime> dateInserted, Nullable<System.DateTime> dateUpdated, string uSR)
        {
            var memberSubscriptionTypeIDParameter = memberSubscriptionTypeID.HasValue ?
                new ObjectParameter("MemberSubscriptionTypeID", memberSubscriptionTypeID) :
                new ObjectParameter("MemberSubscriptionTypeID", typeof(int));
    
            var memberCodeParameter = memberCode != null ?
                new ObjectParameter("MemberCode", memberCode) :
                new ObjectParameter("MemberCode", typeof(string));
    
            var identityTypeParameter = identityType != null ?
                new ObjectParameter("IdentityType", identityType) :
                new ObjectParameter("IdentityType", typeof(string));
    
            var emailAddressParameter = emailAddress != null ?
                new ObjectParameter("EmailAddress", emailAddress) :
                new ObjectParameter("EmailAddress", typeof(string));
    
            var telephoneHomeParameter = telephoneHome != null ?
                new ObjectParameter("TelephoneHome", telephoneHome) :
                new ObjectParameter("TelephoneHome", typeof(string));
    
            var telephoneOfficeParameter = telephoneOffice != null ?
                new ObjectParameter("TelephoneOffice", telephoneOffice) :
                new ObjectParameter("TelephoneOffice", typeof(string));
    
            var telephoneMobileParameter = telephoneMobile != null ?
                new ObjectParameter("TelephoneMobile", telephoneMobile) :
                new ObjectParameter("TelephoneMobile", typeof(string));
    
            var genderParameter = gender != null ?
                new ObjectParameter("Gender", gender) :
                new ObjectParameter("Gender", typeof(string));
    
            var ethnicityParameter = ethnicity != null ?
                new ObjectParameter("Ethnicity", ethnicity) :
                new ObjectParameter("Ethnicity", typeof(string));
    
            var dateOfBirthParameter = dateOfBirth.HasValue ?
                new ObjectParameter("DateOfBirth", dateOfBirth) :
                new ObjectParameter("DateOfBirth", typeof(System.DateTime));
    
            var activeIndicatorParameter = activeIndicator.HasValue ?
                new ObjectParameter("ActiveIndicator", activeIndicator) :
                new ObjectParameter("ActiveIndicator", typeof(bool));
    
            var renewalDateParameter = renewalDate.HasValue ?
                new ObjectParameter("RenewalDate", renewalDate) :
                new ObjectParameter("RenewalDate", typeof(System.DateTime));
    
            var addressIDParameter = addressID.HasValue ?
                new ObjectParameter("AddressID", addressID) :
                new ObjectParameter("AddressID", typeof(int));
    
            var dateInsertedParameter = dateInserted.HasValue ?
                new ObjectParameter("DateInserted", dateInserted) :
                new ObjectParameter("DateInserted", typeof(System.DateTime));
    
            var dateUpdatedParameter = dateUpdated.HasValue ?
                new ObjectParameter("DateUpdated", dateUpdated) :
                new ObjectParameter("DateUpdated", typeof(System.DateTime));
    
            var uSRParameter = uSR != null ?
                new ObjectParameter("USR", uSR) :
                new ObjectParameter("USR", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_MemberInsert", memberSubscriptionTypeIDParameter, memberCodeParameter, identityTypeParameter, emailAddressParameter, telephoneHomeParameter, telephoneOfficeParameter, telephoneMobileParameter, genderParameter, ethnicityParameter, dateOfBirthParameter, activeIndicatorParameter, renewalDateParameter, addressIDParameter, dateInsertedParameter, dateUpdatedParameter, uSRParameter);
        }
    
        public virtual int usp_MemberInterestDelete(Nullable<int> memberID, Nullable<int> productCategoryID)
        {
            var memberIDParameter = memberID.HasValue ?
                new ObjectParameter("MemberID", memberID) :
                new ObjectParameter("MemberID", typeof(int));
    
            var productCategoryIDParameter = productCategoryID.HasValue ?
                new ObjectParameter("ProductCategoryID", productCategoryID) :
                new ObjectParameter("ProductCategoryID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_MemberInterestDelete", memberIDParameter, productCategoryIDParameter);
        }
    
        public virtual ObjectResult<usp_MemberInterestInsert_Result> usp_MemberInterestInsert(Nullable<int> memberID, Nullable<int> productCategoryID, Nullable<System.DateTime> dateInserted, Nullable<System.DateTime> dateUpdated, string uSR)
        {
            var memberIDParameter = memberID.HasValue ?
                new ObjectParameter("MemberID", memberID) :
                new ObjectParameter("MemberID", typeof(int));
    
            var productCategoryIDParameter = productCategoryID.HasValue ?
                new ObjectParameter("ProductCategoryID", productCategoryID) :
                new ObjectParameter("ProductCategoryID", typeof(int));
    
            var dateInsertedParameter = dateInserted.HasValue ?
                new ObjectParameter("DateInserted", dateInserted) :
                new ObjectParameter("DateInserted", typeof(System.DateTime));
    
            var dateUpdatedParameter = dateUpdated.HasValue ?
                new ObjectParameter("DateUpdated", dateUpdated) :
                new ObjectParameter("DateUpdated", typeof(System.DateTime));
    
            var uSRParameter = uSR != null ?
                new ObjectParameter("USR", uSR) :
                new ObjectParameter("USR", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_MemberInterestInsert_Result>("usp_MemberInterestInsert", memberIDParameter, productCategoryIDParameter, dateInsertedParameter, dateUpdatedParameter, uSRParameter);
        }
    
        public virtual ObjectResult<usp_MemberInterestSelect_Result> usp_MemberInterestSelect(Nullable<int> memberID, Nullable<int> productCategoryID)
        {
            var memberIDParameter = memberID.HasValue ?
                new ObjectParameter("MemberID", memberID) :
                new ObjectParameter("MemberID", typeof(int));
    
            var productCategoryIDParameter = productCategoryID.HasValue ?
                new ObjectParameter("ProductCategoryID", productCategoryID) :
                new ObjectParameter("ProductCategoryID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_MemberInterestSelect_Result>("usp_MemberInterestSelect", memberIDParameter, productCategoryIDParameter);
        }
    
        public virtual ObjectResult<usp_MemberInterestUpdate_Result> usp_MemberInterestUpdate(Nullable<int> memberID, Nullable<int> productCategoryID, Nullable<System.DateTime> dateInserted, Nullable<System.DateTime> dateUpdated, string uSR)
        {
            var memberIDParameter = memberID.HasValue ?
                new ObjectParameter("MemberID", memberID) :
                new ObjectParameter("MemberID", typeof(int));
    
            var productCategoryIDParameter = productCategoryID.HasValue ?
                new ObjectParameter("ProductCategoryID", productCategoryID) :
                new ObjectParameter("ProductCategoryID", typeof(int));
    
            var dateInsertedParameter = dateInserted.HasValue ?
                new ObjectParameter("DateInserted", dateInserted) :
                new ObjectParameter("DateInserted", typeof(System.DateTime));
    
            var dateUpdatedParameter = dateUpdated.HasValue ?
                new ObjectParameter("DateUpdated", dateUpdated) :
                new ObjectParameter("DateUpdated", typeof(System.DateTime));
    
            var uSRParameter = uSR != null ?
                new ObjectParameter("USR", uSR) :
                new ObjectParameter("USR", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_MemberInterestUpdate_Result>("usp_MemberInterestUpdate", memberIDParameter, productCategoryIDParameter, dateInsertedParameter, dateUpdatedParameter, uSRParameter);
        }
    
        public virtual int usp_MemberOwnedDelete(Nullable<int> memberID, Nullable<int> ownerID, Nullable<int> territoryID, Nullable<int> memberAcquisitionCampaignID, Nullable<System.DateTime> dateFrom)
        {
            var memberIDParameter = memberID.HasValue ?
                new ObjectParameter("MemberID", memberID) :
                new ObjectParameter("MemberID", typeof(int));
    
            var ownerIDParameter = ownerID.HasValue ?
                new ObjectParameter("OwnerID", ownerID) :
                new ObjectParameter("OwnerID", typeof(int));
    
            var territoryIDParameter = territoryID.HasValue ?
                new ObjectParameter("TerritoryID", territoryID) :
                new ObjectParameter("TerritoryID", typeof(int));
    
            var memberAcquisitionCampaignIDParameter = memberAcquisitionCampaignID.HasValue ?
                new ObjectParameter("MemberAcquisitionCampaignID", memberAcquisitionCampaignID) :
                new ObjectParameter("MemberAcquisitionCampaignID", typeof(int));
    
            var dateFromParameter = dateFrom.HasValue ?
                new ObjectParameter("DateFrom", dateFrom) :
                new ObjectParameter("DateFrom", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_MemberOwnedDelete", memberIDParameter, ownerIDParameter, territoryIDParameter, memberAcquisitionCampaignIDParameter, dateFromParameter);
        }
    
        public virtual ObjectResult<usp_MemberOwnedInsert_Result> usp_MemberOwnedInsert(Nullable<int> memberID, Nullable<int> ownerID, Nullable<int> territoryID, Nullable<int> memberAcquisitionCampaignID, Nullable<System.DateTime> dateFrom, Nullable<System.DateTime> dateTo, Nullable<bool> exclusiveIndicator, Nullable<System.DateTime> dateInserted, Nullable<System.DateTime> dateUpdated, string uSR)
        {
            var memberIDParameter = memberID.HasValue ?
                new ObjectParameter("MemberID", memberID) :
                new ObjectParameter("MemberID", typeof(int));
    
            var ownerIDParameter = ownerID.HasValue ?
                new ObjectParameter("OwnerID", ownerID) :
                new ObjectParameter("OwnerID", typeof(int));
    
            var territoryIDParameter = territoryID.HasValue ?
                new ObjectParameter("TerritoryID", territoryID) :
                new ObjectParameter("TerritoryID", typeof(int));
    
            var memberAcquisitionCampaignIDParameter = memberAcquisitionCampaignID.HasValue ?
                new ObjectParameter("MemberAcquisitionCampaignID", memberAcquisitionCampaignID) :
                new ObjectParameter("MemberAcquisitionCampaignID", typeof(int));
    
            var dateFromParameter = dateFrom.HasValue ?
                new ObjectParameter("DateFrom", dateFrom) :
                new ObjectParameter("DateFrom", typeof(System.DateTime));
    
            var dateToParameter = dateTo.HasValue ?
                new ObjectParameter("DateTo", dateTo) :
                new ObjectParameter("DateTo", typeof(System.DateTime));
    
            var exclusiveIndicatorParameter = exclusiveIndicator.HasValue ?
                new ObjectParameter("ExclusiveIndicator", exclusiveIndicator) :
                new ObjectParameter("ExclusiveIndicator", typeof(bool));
    
            var dateInsertedParameter = dateInserted.HasValue ?
                new ObjectParameter("DateInserted", dateInserted) :
                new ObjectParameter("DateInserted", typeof(System.DateTime));
    
            var dateUpdatedParameter = dateUpdated.HasValue ?
                new ObjectParameter("DateUpdated", dateUpdated) :
                new ObjectParameter("DateUpdated", typeof(System.DateTime));
    
            var uSRParameter = uSR != null ?
                new ObjectParameter("USR", uSR) :
                new ObjectParameter("USR", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_MemberOwnedInsert_Result>("usp_MemberOwnedInsert", memberIDParameter, ownerIDParameter, territoryIDParameter, memberAcquisitionCampaignIDParameter, dateFromParameter, dateToParameter, exclusiveIndicatorParameter, dateInsertedParameter, dateUpdatedParameter, uSRParameter);
        }
    
        public virtual ObjectResult<usp_MemberOwnedSelect_Result> usp_MemberOwnedSelect(Nullable<int> memberID, Nullable<int> ownerID, Nullable<int> territoryID, Nullable<int> memberAcquisitionCampaignID, Nullable<System.DateTime> dateFrom)
        {
            var memberIDParameter = memberID.HasValue ?
                new ObjectParameter("MemberID", memberID) :
                new ObjectParameter("MemberID", typeof(int));
    
            var ownerIDParameter = ownerID.HasValue ?
                new ObjectParameter("OwnerID", ownerID) :
                new ObjectParameter("OwnerID", typeof(int));
    
            var territoryIDParameter = territoryID.HasValue ?
                new ObjectParameter("TerritoryID", territoryID) :
                new ObjectParameter("TerritoryID", typeof(int));
    
            var memberAcquisitionCampaignIDParameter = memberAcquisitionCampaignID.HasValue ?
                new ObjectParameter("MemberAcquisitionCampaignID", memberAcquisitionCampaignID) :
                new ObjectParameter("MemberAcquisitionCampaignID", typeof(int));
    
            var dateFromParameter = dateFrom.HasValue ?
                new ObjectParameter("DateFrom", dateFrom) :
                new ObjectParameter("DateFrom", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_MemberOwnedSelect_Result>("usp_MemberOwnedSelect", memberIDParameter, ownerIDParameter, territoryIDParameter, memberAcquisitionCampaignIDParameter, dateFromParameter);
        }
    
        public virtual ObjectResult<usp_MemberOwnedUpdate_Result> usp_MemberOwnedUpdate(Nullable<int> memberID, Nullable<int> ownerID, Nullable<int> territoryID, Nullable<int> memberAcquisitionCampaignID, Nullable<System.DateTime> dateFrom, Nullable<System.DateTime> dateTo, Nullable<bool> exclusiveIndicator, Nullable<System.DateTime> dateInserted, Nullable<System.DateTime> dateUpdated, string uSR)
        {
            var memberIDParameter = memberID.HasValue ?
                new ObjectParameter("MemberID", memberID) :
                new ObjectParameter("MemberID", typeof(int));
    
            var ownerIDParameter = ownerID.HasValue ?
                new ObjectParameter("OwnerID", ownerID) :
                new ObjectParameter("OwnerID", typeof(int));
    
            var territoryIDParameter = territoryID.HasValue ?
                new ObjectParameter("TerritoryID", territoryID) :
                new ObjectParameter("TerritoryID", typeof(int));
    
            var memberAcquisitionCampaignIDParameter = memberAcquisitionCampaignID.HasValue ?
                new ObjectParameter("MemberAcquisitionCampaignID", memberAcquisitionCampaignID) :
                new ObjectParameter("MemberAcquisitionCampaignID", typeof(int));
    
            var dateFromParameter = dateFrom.HasValue ?
                new ObjectParameter("DateFrom", dateFrom) :
                new ObjectParameter("DateFrom", typeof(System.DateTime));
    
            var dateToParameter = dateTo.HasValue ?
                new ObjectParameter("DateTo", dateTo) :
                new ObjectParameter("DateTo", typeof(System.DateTime));
    
            var exclusiveIndicatorParameter = exclusiveIndicator.HasValue ?
                new ObjectParameter("ExclusiveIndicator", exclusiveIndicator) :
                new ObjectParameter("ExclusiveIndicator", typeof(bool));
    
            var dateInsertedParameter = dateInserted.HasValue ?
                new ObjectParameter("DateInserted", dateInserted) :
                new ObjectParameter("DateInserted", typeof(System.DateTime));
    
            var dateUpdatedParameter = dateUpdated.HasValue ?
                new ObjectParameter("DateUpdated", dateUpdated) :
                new ObjectParameter("DateUpdated", typeof(System.DateTime));
    
            var uSRParameter = uSR != null ?
                new ObjectParameter("USR", uSR) :
                new ObjectParameter("USR", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_MemberOwnedUpdate_Result>("usp_MemberOwnedUpdate", memberIDParameter, ownerIDParameter, territoryIDParameter, memberAcquisitionCampaignIDParameter, dateFromParameter, dateToParameter, exclusiveIndicatorParameter, dateInsertedParameter, dateUpdatedParameter, uSRParameter);
        }
    
        public virtual int usp_MemberSelect(Nullable<int> memberID)
        {
            var memberIDParameter = memberID.HasValue ?
                new ObjectParameter("MemberID", memberID) :
                new ObjectParameter("MemberID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_MemberSelect", memberIDParameter);
        }
    
        public virtual int usp_MemberSubscriptionTypeDelete(Nullable<int> memberSubscriptionTypeID)
        {
            var memberSubscriptionTypeIDParameter = memberSubscriptionTypeID.HasValue ?
                new ObjectParameter("MemberSubscriptionTypeID", memberSubscriptionTypeID) :
                new ObjectParameter("MemberSubscriptionTypeID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_MemberSubscriptionTypeDelete", memberSubscriptionTypeIDParameter);
        }
    
        public virtual ObjectResult<usp_MemberSubscriptionTypeInsert_Result> usp_MemberSubscriptionTypeInsert(string memberSubscriptionTypeCode, string memberSubscriptionTypeDescription, Nullable<System.DateTime> dateInserted, Nullable<System.DateTime> dateUpdated, string uSR)
        {
            var memberSubscriptionTypeCodeParameter = memberSubscriptionTypeCode != null ?
                new ObjectParameter("MemberSubscriptionTypeCode", memberSubscriptionTypeCode) :
                new ObjectParameter("MemberSubscriptionTypeCode", typeof(string));
    
            var memberSubscriptionTypeDescriptionParameter = memberSubscriptionTypeDescription != null ?
                new ObjectParameter("MemberSubscriptionTypeDescription", memberSubscriptionTypeDescription) :
                new ObjectParameter("MemberSubscriptionTypeDescription", typeof(string));
    
            var dateInsertedParameter = dateInserted.HasValue ?
                new ObjectParameter("DateInserted", dateInserted) :
                new ObjectParameter("DateInserted", typeof(System.DateTime));
    
            var dateUpdatedParameter = dateUpdated.HasValue ?
                new ObjectParameter("DateUpdated", dateUpdated) :
                new ObjectParameter("DateUpdated", typeof(System.DateTime));
    
            var uSRParameter = uSR != null ?
                new ObjectParameter("USR", uSR) :
                new ObjectParameter("USR", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_MemberSubscriptionTypeInsert_Result>("usp_MemberSubscriptionTypeInsert", memberSubscriptionTypeCodeParameter, memberSubscriptionTypeDescriptionParameter, dateInsertedParameter, dateUpdatedParameter, uSRParameter);
        }
    
        public virtual ObjectResult<usp_MemberSubscriptionTypeSelect_Result> usp_MemberSubscriptionTypeSelect(Nullable<int> memberSubscriptionTypeID)
        {
            var memberSubscriptionTypeIDParameter = memberSubscriptionTypeID.HasValue ?
                new ObjectParameter("MemberSubscriptionTypeID", memberSubscriptionTypeID) :
                new ObjectParameter("MemberSubscriptionTypeID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_MemberSubscriptionTypeSelect_Result>("usp_MemberSubscriptionTypeSelect", memberSubscriptionTypeIDParameter);
        }
    
        public virtual ObjectResult<usp_MemberSubscriptionTypeUpdate_Result> usp_MemberSubscriptionTypeUpdate(Nullable<int> memberSubscriptionTypeID, string memberSubscriptionTypeCode, string memberSubscriptionTypeDescription, Nullable<System.DateTime> dateInserted, Nullable<System.DateTime> dateUpdated, string uSR)
        {
            var memberSubscriptionTypeIDParameter = memberSubscriptionTypeID.HasValue ?
                new ObjectParameter("MemberSubscriptionTypeID", memberSubscriptionTypeID) :
                new ObjectParameter("MemberSubscriptionTypeID", typeof(int));
    
            var memberSubscriptionTypeCodeParameter = memberSubscriptionTypeCode != null ?
                new ObjectParameter("MemberSubscriptionTypeCode", memberSubscriptionTypeCode) :
                new ObjectParameter("MemberSubscriptionTypeCode", typeof(string));
    
            var memberSubscriptionTypeDescriptionParameter = memberSubscriptionTypeDescription != null ?
                new ObjectParameter("MemberSubscriptionTypeDescription", memberSubscriptionTypeDescription) :
                new ObjectParameter("MemberSubscriptionTypeDescription", typeof(string));
    
            var dateInsertedParameter = dateInserted.HasValue ?
                new ObjectParameter("DateInserted", dateInserted) :
                new ObjectParameter("DateInserted", typeof(System.DateTime));
    
            var dateUpdatedParameter = dateUpdated.HasValue ?
                new ObjectParameter("DateUpdated", dateUpdated) :
                new ObjectParameter("DateUpdated", typeof(System.DateTime));
    
            var uSRParameter = uSR != null ?
                new ObjectParameter("USR", uSR) :
                new ObjectParameter("USR", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_MemberSubscriptionTypeUpdate_Result>("usp_MemberSubscriptionTypeUpdate", memberSubscriptionTypeIDParameter, memberSubscriptionTypeCodeParameter, memberSubscriptionTypeDescriptionParameter, dateInsertedParameter, dateUpdatedParameter, uSRParameter);
        }
    
        public virtual int usp_MemberUpdate(Nullable<int> memberID, Nullable<int> memberSubscriptionTypeID, string memberCode, string identityType, string emailAddress, string telephoneHome, string telephoneOffice, string telephoneMobile, string gender, string ethnicity, Nullable<System.DateTime> dateOfBirth, Nullable<bool> activeIndicator, Nullable<System.DateTime> renewalDate, Nullable<int> addressID, Nullable<System.DateTime> dateInserted, Nullable<System.DateTime> dateUpdated, string uSR)
        {
            var memberIDParameter = memberID.HasValue ?
                new ObjectParameter("MemberID", memberID) :
                new ObjectParameter("MemberID", typeof(int));
    
            var memberSubscriptionTypeIDParameter = memberSubscriptionTypeID.HasValue ?
                new ObjectParameter("MemberSubscriptionTypeID", memberSubscriptionTypeID) :
                new ObjectParameter("MemberSubscriptionTypeID", typeof(int));
    
            var memberCodeParameter = memberCode != null ?
                new ObjectParameter("MemberCode", memberCode) :
                new ObjectParameter("MemberCode", typeof(string));
    
            var identityTypeParameter = identityType != null ?
                new ObjectParameter("IdentityType", identityType) :
                new ObjectParameter("IdentityType", typeof(string));
    
            var emailAddressParameter = emailAddress != null ?
                new ObjectParameter("EmailAddress", emailAddress) :
                new ObjectParameter("EmailAddress", typeof(string));
    
            var telephoneHomeParameter = telephoneHome != null ?
                new ObjectParameter("TelephoneHome", telephoneHome) :
                new ObjectParameter("TelephoneHome", typeof(string));
    
            var telephoneOfficeParameter = telephoneOffice != null ?
                new ObjectParameter("TelephoneOffice", telephoneOffice) :
                new ObjectParameter("TelephoneOffice", typeof(string));
    
            var telephoneMobileParameter = telephoneMobile != null ?
                new ObjectParameter("TelephoneMobile", telephoneMobile) :
                new ObjectParameter("TelephoneMobile", typeof(string));
    
            var genderParameter = gender != null ?
                new ObjectParameter("Gender", gender) :
                new ObjectParameter("Gender", typeof(string));
    
            var ethnicityParameter = ethnicity != null ?
                new ObjectParameter("Ethnicity", ethnicity) :
                new ObjectParameter("Ethnicity", typeof(string));
    
            var dateOfBirthParameter = dateOfBirth.HasValue ?
                new ObjectParameter("DateOfBirth", dateOfBirth) :
                new ObjectParameter("DateOfBirth", typeof(System.DateTime));
    
            var activeIndicatorParameter = activeIndicator.HasValue ?
                new ObjectParameter("ActiveIndicator", activeIndicator) :
                new ObjectParameter("ActiveIndicator", typeof(bool));
    
            var renewalDateParameter = renewalDate.HasValue ?
                new ObjectParameter("RenewalDate", renewalDate) :
                new ObjectParameter("RenewalDate", typeof(System.DateTime));
    
            var addressIDParameter = addressID.HasValue ?
                new ObjectParameter("AddressID", addressID) :
                new ObjectParameter("AddressID", typeof(int));
    
            var dateInsertedParameter = dateInserted.HasValue ?
                new ObjectParameter("DateInserted", dateInserted) :
                new ObjectParameter("DateInserted", typeof(System.DateTime));
    
            var dateUpdatedParameter = dateUpdated.HasValue ?
                new ObjectParameter("DateUpdated", dateUpdated) :
                new ObjectParameter("DateUpdated", typeof(System.DateTime));
    
            var uSRParameter = uSR != null ?
                new ObjectParameter("USR", uSR) :
                new ObjectParameter("USR", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_MemberUpdate", memberIDParameter, memberSubscriptionTypeIDParameter, memberCodeParameter, identityTypeParameter, emailAddressParameter, telephoneHomeParameter, telephoneOfficeParameter, telephoneMobileParameter, genderParameter, ethnicityParameter, dateOfBirthParameter, activeIndicatorParameter, renewalDateParameter, addressIDParameter, dateInsertedParameter, dateUpdatedParameter, uSRParameter);
        }
    
        public virtual int usp_NextGameDelete(Nullable<int> gameID)
        {
            var gameIDParameter = gameID.HasValue ?
                new ObjectParameter("GameID", gameID) :
                new ObjectParameter("GameID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_NextGameDelete", gameIDParameter);
        }
    
        public virtual ObjectResult<usp_NextGameInsert_Result> usp_NextGameInsert(Nullable<int> gameID, Nullable<int> nextGameID, Nullable<System.DateTime> dateInserted, Nullable<System.DateTime> dateUpdated, string uSR)
        {
            var gameIDParameter = gameID.HasValue ?
                new ObjectParameter("GameID", gameID) :
                new ObjectParameter("GameID", typeof(int));
    
            var nextGameIDParameter = nextGameID.HasValue ?
                new ObjectParameter("NextGameID", nextGameID) :
                new ObjectParameter("NextGameID", typeof(int));
    
            var dateInsertedParameter = dateInserted.HasValue ?
                new ObjectParameter("DateInserted", dateInserted) :
                new ObjectParameter("DateInserted", typeof(System.DateTime));
    
            var dateUpdatedParameter = dateUpdated.HasValue ?
                new ObjectParameter("DateUpdated", dateUpdated) :
                new ObjectParameter("DateUpdated", typeof(System.DateTime));
    
            var uSRParameter = uSR != null ?
                new ObjectParameter("USR", uSR) :
                new ObjectParameter("USR", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_NextGameInsert_Result>("usp_NextGameInsert", gameIDParameter, nextGameIDParameter, dateInsertedParameter, dateUpdatedParameter, uSRParameter);
        }
    
        public virtual ObjectResult<usp_NextGameSelect_Result> usp_NextGameSelect(Nullable<int> gameID)
        {
            var gameIDParameter = gameID.HasValue ?
                new ObjectParameter("GameID", gameID) :
                new ObjectParameter("GameID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_NextGameSelect_Result>("usp_NextGameSelect", gameIDParameter);
        }
    
        public virtual ObjectResult<usp_NextGameUpdate_Result> usp_NextGameUpdate(Nullable<int> gameID, Nullable<int> nextGameID, Nullable<System.DateTime> dateInserted, Nullable<System.DateTime> dateUpdated, string uSR)
        {
            var gameIDParameter = gameID.HasValue ?
                new ObjectParameter("GameID", gameID) :
                new ObjectParameter("GameID", typeof(int));
    
            var nextGameIDParameter = nextGameID.HasValue ?
                new ObjectParameter("NextGameID", nextGameID) :
                new ObjectParameter("NextGameID", typeof(int));
    
            var dateInsertedParameter = dateInserted.HasValue ?
                new ObjectParameter("DateInserted", dateInserted) :
                new ObjectParameter("DateInserted", typeof(System.DateTime));
    
            var dateUpdatedParameter = dateUpdated.HasValue ?
                new ObjectParameter("DateUpdated", dateUpdated) :
                new ObjectParameter("DateUpdated", typeof(System.DateTime));
    
            var uSRParameter = uSR != null ?
                new ObjectParameter("USR", uSR) :
                new ObjectParameter("USR", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_NextGameUpdate_Result>("usp_NextGameUpdate", gameIDParameter, nextGameIDParameter, dateInsertedParameter, dateUpdatedParameter, uSRParameter);
        }
    
        public virtual int usp_OwnerDelete(Nullable<int> ownerID)
        {
            var ownerIDParameter = ownerID.HasValue ?
                new ObjectParameter("OwnerID", ownerID) :
                new ObjectParameter("OwnerID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_OwnerDelete", ownerIDParameter);
        }
    
        public virtual ObjectResult<usp_OwnerInsert_Result> usp_OwnerInsert(string ownerCode, string ownerName, string ownerType, string bankingDetailBank, string bankingDetailAccountNumber, string bankingDetailAccountType, string bankingDetailBranchCode, string bankingDetailBranchName, string bankingDetailDefaultReference, string emailAddress, string contactPerson, string telephoneOffice, string telephoneMobile, Nullable<int> addressID, Nullable<System.DateTime> dateInserted, Nullable<System.DateTime> dateUpdated, string uSR)
        {
            var ownerCodeParameter = ownerCode != null ?
                new ObjectParameter("OwnerCode", ownerCode) :
                new ObjectParameter("OwnerCode", typeof(string));
    
            var ownerNameParameter = ownerName != null ?
                new ObjectParameter("OwnerName", ownerName) :
                new ObjectParameter("OwnerName", typeof(string));
    
            var ownerTypeParameter = ownerType != null ?
                new ObjectParameter("OwnerType", ownerType) :
                new ObjectParameter("OwnerType", typeof(string));
    
            var bankingDetailBankParameter = bankingDetailBank != null ?
                new ObjectParameter("BankingDetailBank", bankingDetailBank) :
                new ObjectParameter("BankingDetailBank", typeof(string));
    
            var bankingDetailAccountNumberParameter = bankingDetailAccountNumber != null ?
                new ObjectParameter("BankingDetailAccountNumber", bankingDetailAccountNumber) :
                new ObjectParameter("BankingDetailAccountNumber", typeof(string));
    
            var bankingDetailAccountTypeParameter = bankingDetailAccountType != null ?
                new ObjectParameter("BankingDetailAccountType", bankingDetailAccountType) :
                new ObjectParameter("BankingDetailAccountType", typeof(string));
    
            var bankingDetailBranchCodeParameter = bankingDetailBranchCode != null ?
                new ObjectParameter("BankingDetailBranchCode", bankingDetailBranchCode) :
                new ObjectParameter("BankingDetailBranchCode", typeof(string));
    
            var bankingDetailBranchNameParameter = bankingDetailBranchName != null ?
                new ObjectParameter("BankingDetailBranchName", bankingDetailBranchName) :
                new ObjectParameter("BankingDetailBranchName", typeof(string));
    
            var bankingDetailDefaultReferenceParameter = bankingDetailDefaultReference != null ?
                new ObjectParameter("BankingDetailDefaultReference", bankingDetailDefaultReference) :
                new ObjectParameter("BankingDetailDefaultReference", typeof(string));
    
            var emailAddressParameter = emailAddress != null ?
                new ObjectParameter("EmailAddress", emailAddress) :
                new ObjectParameter("EmailAddress", typeof(string));
    
            var contactPersonParameter = contactPerson != null ?
                new ObjectParameter("ContactPerson", contactPerson) :
                new ObjectParameter("ContactPerson", typeof(string));
    
            var telephoneOfficeParameter = telephoneOffice != null ?
                new ObjectParameter("TelephoneOffice", telephoneOffice) :
                new ObjectParameter("TelephoneOffice", typeof(string));
    
            var telephoneMobileParameter = telephoneMobile != null ?
                new ObjectParameter("TelephoneMobile", telephoneMobile) :
                new ObjectParameter("TelephoneMobile", typeof(string));
    
            var addressIDParameter = addressID.HasValue ?
                new ObjectParameter("AddressID", addressID) :
                new ObjectParameter("AddressID", typeof(int));
    
            var dateInsertedParameter = dateInserted.HasValue ?
                new ObjectParameter("DateInserted", dateInserted) :
                new ObjectParameter("DateInserted", typeof(System.DateTime));
    
            var dateUpdatedParameter = dateUpdated.HasValue ?
                new ObjectParameter("DateUpdated", dateUpdated) :
                new ObjectParameter("DateUpdated", typeof(System.DateTime));
    
            var uSRParameter = uSR != null ?
                new ObjectParameter("USR", uSR) :
                new ObjectParameter("USR", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_OwnerInsert_Result>("usp_OwnerInsert", ownerCodeParameter, ownerNameParameter, ownerTypeParameter, bankingDetailBankParameter, bankingDetailAccountNumberParameter, bankingDetailAccountTypeParameter, bankingDetailBranchCodeParameter, bankingDetailBranchNameParameter, bankingDetailDefaultReferenceParameter, emailAddressParameter, contactPersonParameter, telephoneOfficeParameter, telephoneMobileParameter, addressIDParameter, dateInsertedParameter, dateUpdatedParameter, uSRParameter);
        }
    
        public virtual ObjectResult<usp_OwnerSelect_Result> usp_OwnerSelect(Nullable<int> ownerID)
        {
            var ownerIDParameter = ownerID.HasValue ?
                new ObjectParameter("OwnerID", ownerID) :
                new ObjectParameter("OwnerID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_OwnerSelect_Result>("usp_OwnerSelect", ownerIDParameter);
        }
    
        public virtual ObjectResult<usp_OwnerUpdate_Result> usp_OwnerUpdate(Nullable<int> ownerID, string ownerCode, string ownerName, string ownerType, string bankingDetailBank, string bankingDetailAccountNumber, string bankingDetailAccountType, string bankingDetailBranchCode, string bankingDetailBranchName, string bankingDetailDefaultReference, string emailAddress, string contactPerson, string telephoneOffice, string telephoneMobile, Nullable<int> addressID, Nullable<System.DateTime> dateInserted, Nullable<System.DateTime> dateUpdated, string uSR)
        {
            var ownerIDParameter = ownerID.HasValue ?
                new ObjectParameter("OwnerID", ownerID) :
                new ObjectParameter("OwnerID", typeof(int));
    
            var ownerCodeParameter = ownerCode != null ?
                new ObjectParameter("OwnerCode", ownerCode) :
                new ObjectParameter("OwnerCode", typeof(string));
    
            var ownerNameParameter = ownerName != null ?
                new ObjectParameter("OwnerName", ownerName) :
                new ObjectParameter("OwnerName", typeof(string));
    
            var ownerTypeParameter = ownerType != null ?
                new ObjectParameter("OwnerType", ownerType) :
                new ObjectParameter("OwnerType", typeof(string));
    
            var bankingDetailBankParameter = bankingDetailBank != null ?
                new ObjectParameter("BankingDetailBank", bankingDetailBank) :
                new ObjectParameter("BankingDetailBank", typeof(string));
    
            var bankingDetailAccountNumberParameter = bankingDetailAccountNumber != null ?
                new ObjectParameter("BankingDetailAccountNumber", bankingDetailAccountNumber) :
                new ObjectParameter("BankingDetailAccountNumber", typeof(string));
    
            var bankingDetailAccountTypeParameter = bankingDetailAccountType != null ?
                new ObjectParameter("BankingDetailAccountType", bankingDetailAccountType) :
                new ObjectParameter("BankingDetailAccountType", typeof(string));
    
            var bankingDetailBranchCodeParameter = bankingDetailBranchCode != null ?
                new ObjectParameter("BankingDetailBranchCode", bankingDetailBranchCode) :
                new ObjectParameter("BankingDetailBranchCode", typeof(string));
    
            var bankingDetailBranchNameParameter = bankingDetailBranchName != null ?
                new ObjectParameter("BankingDetailBranchName", bankingDetailBranchName) :
                new ObjectParameter("BankingDetailBranchName", typeof(string));
    
            var bankingDetailDefaultReferenceParameter = bankingDetailDefaultReference != null ?
                new ObjectParameter("BankingDetailDefaultReference", bankingDetailDefaultReference) :
                new ObjectParameter("BankingDetailDefaultReference", typeof(string));
    
            var emailAddressParameter = emailAddress != null ?
                new ObjectParameter("EmailAddress", emailAddress) :
                new ObjectParameter("EmailAddress", typeof(string));
    
            var contactPersonParameter = contactPerson != null ?
                new ObjectParameter("ContactPerson", contactPerson) :
                new ObjectParameter("ContactPerson", typeof(string));
    
            var telephoneOfficeParameter = telephoneOffice != null ?
                new ObjectParameter("TelephoneOffice", telephoneOffice) :
                new ObjectParameter("TelephoneOffice", typeof(string));
    
            var telephoneMobileParameter = telephoneMobile != null ?
                new ObjectParameter("TelephoneMobile", telephoneMobile) :
                new ObjectParameter("TelephoneMobile", typeof(string));
    
            var addressIDParameter = addressID.HasValue ?
                new ObjectParameter("AddressID", addressID) :
                new ObjectParameter("AddressID", typeof(int));
    
            var dateInsertedParameter = dateInserted.HasValue ?
                new ObjectParameter("DateInserted", dateInserted) :
                new ObjectParameter("DateInserted", typeof(System.DateTime));
    
            var dateUpdatedParameter = dateUpdated.HasValue ?
                new ObjectParameter("DateUpdated", dateUpdated) :
                new ObjectParameter("DateUpdated", typeof(System.DateTime));
    
            var uSRParameter = uSR != null ?
                new ObjectParameter("USR", uSR) :
                new ObjectParameter("USR", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_OwnerUpdate_Result>("usp_OwnerUpdate", ownerIDParameter, ownerCodeParameter, ownerNameParameter, ownerTypeParameter, bankingDetailBankParameter, bankingDetailAccountNumberParameter, bankingDetailAccountTypeParameter, bankingDetailBranchCodeParameter, bankingDetailBranchNameParameter, bankingDetailDefaultReferenceParameter, emailAddressParameter, contactPersonParameter, telephoneOfficeParameter, telephoneMobileParameter, addressIDParameter, dateInsertedParameter, dateUpdatedParameter, uSRParameter);
        }
    
        public virtual int usp_ProductCategoryDelete(Nullable<int> productCategoryID)
        {
            var productCategoryIDParameter = productCategoryID.HasValue ?
                new ObjectParameter("ProductCategoryID", productCategoryID) :
                new ObjectParameter("ProductCategoryID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_ProductCategoryDelete", productCategoryIDParameter);
        }
    
        public virtual ObjectResult<usp_ProductCategoryInsert_Result> usp_ProductCategoryInsert(string productCategoryCode, string productCategoryName, string productCategoryDescription, Nullable<System.DateTime> dateInserted, Nullable<System.DateTime> dateUpdated, string uSR)
        {
            var productCategoryCodeParameter = productCategoryCode != null ?
                new ObjectParameter("ProductCategoryCode", productCategoryCode) :
                new ObjectParameter("ProductCategoryCode", typeof(string));
    
            var productCategoryNameParameter = productCategoryName != null ?
                new ObjectParameter("ProductCategoryName", productCategoryName) :
                new ObjectParameter("ProductCategoryName", typeof(string));
    
            var productCategoryDescriptionParameter = productCategoryDescription != null ?
                new ObjectParameter("ProductCategoryDescription", productCategoryDescription) :
                new ObjectParameter("ProductCategoryDescription", typeof(string));
    
            var dateInsertedParameter = dateInserted.HasValue ?
                new ObjectParameter("DateInserted", dateInserted) :
                new ObjectParameter("DateInserted", typeof(System.DateTime));
    
            var dateUpdatedParameter = dateUpdated.HasValue ?
                new ObjectParameter("DateUpdated", dateUpdated) :
                new ObjectParameter("DateUpdated", typeof(System.DateTime));
    
            var uSRParameter = uSR != null ?
                new ObjectParameter("USR", uSR) :
                new ObjectParameter("USR", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_ProductCategoryInsert_Result>("usp_ProductCategoryInsert", productCategoryCodeParameter, productCategoryNameParameter, productCategoryDescriptionParameter, dateInsertedParameter, dateUpdatedParameter, uSRParameter);
        }
    
        public virtual ObjectResult<usp_ProductCategorySelect_Result> usp_ProductCategorySelect(Nullable<int> productCategoryID)
        {
            var productCategoryIDParameter = productCategoryID.HasValue ?
                new ObjectParameter("ProductCategoryID", productCategoryID) :
                new ObjectParameter("ProductCategoryID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_ProductCategorySelect_Result>("usp_ProductCategorySelect", productCategoryIDParameter);
        }
    
        public virtual ObjectResult<usp_ProductCategoryUpdate_Result> usp_ProductCategoryUpdate(Nullable<int> productCategoryID, string productCategoryCode, string productCategoryName, string productCategoryDescription, Nullable<System.DateTime> dateInserted, Nullable<System.DateTime> dateUpdated, string uSR)
        {
            var productCategoryIDParameter = productCategoryID.HasValue ?
                new ObjectParameter("ProductCategoryID", productCategoryID) :
                new ObjectParameter("ProductCategoryID", typeof(int));
    
            var productCategoryCodeParameter = productCategoryCode != null ?
                new ObjectParameter("ProductCategoryCode", productCategoryCode) :
                new ObjectParameter("ProductCategoryCode", typeof(string));
    
            var productCategoryNameParameter = productCategoryName != null ?
                new ObjectParameter("ProductCategoryName", productCategoryName) :
                new ObjectParameter("ProductCategoryName", typeof(string));
    
            var productCategoryDescriptionParameter = productCategoryDescription != null ?
                new ObjectParameter("ProductCategoryDescription", productCategoryDescription) :
                new ObjectParameter("ProductCategoryDescription", typeof(string));
    
            var dateInsertedParameter = dateInserted.HasValue ?
                new ObjectParameter("DateInserted", dateInserted) :
                new ObjectParameter("DateInserted", typeof(System.DateTime));
    
            var dateUpdatedParameter = dateUpdated.HasValue ?
                new ObjectParameter("DateUpdated", dateUpdated) :
                new ObjectParameter("DateUpdated", typeof(System.DateTime));
    
            var uSRParameter = uSR != null ?
                new ObjectParameter("USR", uSR) :
                new ObjectParameter("USR", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_ProductCategoryUpdate_Result>("usp_ProductCategoryUpdate", productCategoryIDParameter, productCategoryCodeParameter, productCategoryNameParameter, productCategoryDescriptionParameter, dateInsertedParameter, dateUpdatedParameter, uSRParameter);
        }
    
        public virtual int usp_ProductDelete(Nullable<int> productID)
        {
            var productIDParameter = productID.HasValue ?
                new ObjectParameter("ProductID", productID) :
                new ObjectParameter("ProductID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_ProductDelete", productIDParameter);
        }
    
        public virtual int usp_ProductInCategoryDelete(Nullable<int> productID, Nullable<int> productCategoryID)
        {
            var productIDParameter = productID.HasValue ?
                new ObjectParameter("ProductID", productID) :
                new ObjectParameter("ProductID", typeof(int));
    
            var productCategoryIDParameter = productCategoryID.HasValue ?
                new ObjectParameter("ProductCategoryID", productCategoryID) :
                new ObjectParameter("ProductCategoryID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_ProductInCategoryDelete", productIDParameter, productCategoryIDParameter);
        }
    
        public virtual ObjectResult<usp_ProductInCategoryInsert_Result> usp_ProductInCategoryInsert(Nullable<int> productID, Nullable<int> productCategoryID, Nullable<System.DateTime> dateInserted, Nullable<System.DateTime> dateUpdated, string uSR)
        {
            var productIDParameter = productID.HasValue ?
                new ObjectParameter("ProductID", productID) :
                new ObjectParameter("ProductID", typeof(int));
    
            var productCategoryIDParameter = productCategoryID.HasValue ?
                new ObjectParameter("ProductCategoryID", productCategoryID) :
                new ObjectParameter("ProductCategoryID", typeof(int));
    
            var dateInsertedParameter = dateInserted.HasValue ?
                new ObjectParameter("DateInserted", dateInserted) :
                new ObjectParameter("DateInserted", typeof(System.DateTime));
    
            var dateUpdatedParameter = dateUpdated.HasValue ?
                new ObjectParameter("DateUpdated", dateUpdated) :
                new ObjectParameter("DateUpdated", typeof(System.DateTime));
    
            var uSRParameter = uSR != null ?
                new ObjectParameter("USR", uSR) :
                new ObjectParameter("USR", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_ProductInCategoryInsert_Result>("usp_ProductInCategoryInsert", productIDParameter, productCategoryIDParameter, dateInsertedParameter, dateUpdatedParameter, uSRParameter);
        }
    
        public virtual ObjectResult<usp_ProductInCategorySelect_Result> usp_ProductInCategorySelect(Nullable<int> productID, Nullable<int> productCategoryID)
        {
            var productIDParameter = productID.HasValue ?
                new ObjectParameter("ProductID", productID) :
                new ObjectParameter("ProductID", typeof(int));
    
            var productCategoryIDParameter = productCategoryID.HasValue ?
                new ObjectParameter("ProductCategoryID", productCategoryID) :
                new ObjectParameter("ProductCategoryID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_ProductInCategorySelect_Result>("usp_ProductInCategorySelect", productIDParameter, productCategoryIDParameter);
        }
    
        public virtual ObjectResult<usp_ProductInCategoryUpdate_Result> usp_ProductInCategoryUpdate(Nullable<int> productID, Nullable<int> productCategoryID, Nullable<System.DateTime> dateInserted, Nullable<System.DateTime> dateUpdated, string uSR)
        {
            var productIDParameter = productID.HasValue ?
                new ObjectParameter("ProductID", productID) :
                new ObjectParameter("ProductID", typeof(int));
    
            var productCategoryIDParameter = productCategoryID.HasValue ?
                new ObjectParameter("ProductCategoryID", productCategoryID) :
                new ObjectParameter("ProductCategoryID", typeof(int));
    
            var dateInsertedParameter = dateInserted.HasValue ?
                new ObjectParameter("DateInserted", dateInserted) :
                new ObjectParameter("DateInserted", typeof(System.DateTime));
    
            var dateUpdatedParameter = dateUpdated.HasValue ?
                new ObjectParameter("DateUpdated", dateUpdated) :
                new ObjectParameter("DateUpdated", typeof(System.DateTime));
    
            var uSRParameter = uSR != null ?
                new ObjectParameter("USR", uSR) :
                new ObjectParameter("USR", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_ProductInCategoryUpdate_Result>("usp_ProductInCategoryUpdate", productIDParameter, productCategoryIDParameter, dateInsertedParameter, dateUpdatedParameter, uSRParameter);
        }
    
        public virtual int usp_ProductInGameDelete(Nullable<int> productID, Nullable<int> memberID)
        {
            var productIDParameter = productID.HasValue ?
                new ObjectParameter("ProductID", productID) :
                new ObjectParameter("ProductID", typeof(int));
    
            var memberIDParameter = memberID.HasValue ?
                new ObjectParameter("MemberID", memberID) :
                new ObjectParameter("MemberID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_ProductInGameDelete", productIDParameter, memberIDParameter);
        }
    
        public virtual int usp_ProductInGameInsert(Nullable<int> productID, Nullable<int> memberID, Nullable<int> productQuantity, Nullable<System.DateTime> dateInserted, Nullable<System.DateTime> dateUpdated, string uSR)
        {
            var productIDParameter = productID.HasValue ?
                new ObjectParameter("ProductID", productID) :
                new ObjectParameter("ProductID", typeof(int));
    
            var memberIDParameter = memberID.HasValue ?
                new ObjectParameter("MemberID", memberID) :
                new ObjectParameter("MemberID", typeof(int));
    
            var productQuantityParameter = productQuantity.HasValue ?
                new ObjectParameter("ProductQuantity", productQuantity) :
                new ObjectParameter("ProductQuantity", typeof(int));
    
            var dateInsertedParameter = dateInserted.HasValue ?
                new ObjectParameter("DateInserted", dateInserted) :
                new ObjectParameter("DateInserted", typeof(System.DateTime));
    
            var dateUpdatedParameter = dateUpdated.HasValue ?
                new ObjectParameter("DateUpdated", dateUpdated) :
                new ObjectParameter("DateUpdated", typeof(System.DateTime));
    
            var uSRParameter = uSR != null ?
                new ObjectParameter("USR", uSR) :
                new ObjectParameter("USR", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_ProductInGameInsert", productIDParameter, memberIDParameter, productQuantityParameter, dateInsertedParameter, dateUpdatedParameter, uSRParameter);
        }
    
        public virtual int usp_ProductInGameSelect(Nullable<int> productID, Nullable<int> memberID)
        {
            var productIDParameter = productID.HasValue ?
                new ObjectParameter("ProductID", productID) :
                new ObjectParameter("ProductID", typeof(int));
    
            var memberIDParameter = memberID.HasValue ?
                new ObjectParameter("MemberID", memberID) :
                new ObjectParameter("MemberID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_ProductInGameSelect", productIDParameter, memberIDParameter);
        }
    
        public virtual int usp_ProductInGameUpdate(Nullable<int> productID, Nullable<int> memberID, Nullable<int> productQuantity, Nullable<System.DateTime> dateInserted, Nullable<System.DateTime> dateUpdated, string uSR)
        {
            var productIDParameter = productID.HasValue ?
                new ObjectParameter("ProductID", productID) :
                new ObjectParameter("ProductID", typeof(int));
    
            var memberIDParameter = memberID.HasValue ?
                new ObjectParameter("MemberID", memberID) :
                new ObjectParameter("MemberID", typeof(int));
    
            var productQuantityParameter = productQuantity.HasValue ?
                new ObjectParameter("ProductQuantity", productQuantity) :
                new ObjectParameter("ProductQuantity", typeof(int));
    
            var dateInsertedParameter = dateInserted.HasValue ?
                new ObjectParameter("DateInserted", dateInserted) :
                new ObjectParameter("DateInserted", typeof(System.DateTime));
    
            var dateUpdatedParameter = dateUpdated.HasValue ?
                new ObjectParameter("DateUpdated", dateUpdated) :
                new ObjectParameter("DateUpdated", typeof(System.DateTime));
    
            var uSRParameter = uSR != null ?
                new ObjectParameter("USR", uSR) :
                new ObjectParameter("USR", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_ProductInGameUpdate", productIDParameter, memberIDParameter, productQuantityParameter, dateInsertedParameter, dateUpdatedParameter, uSRParameter);
        }
    
        public virtual ObjectResult<usp_ProductInsert_Result> usp_ProductInsert(string productSKUCode, Nullable<int> ownerID, Nullable<int> contractID, string productName, string productDescription, Nullable<System.DateTime> dateInserted, Nullable<System.DateTime> dateUpdated, string uSR)
        {
            var productSKUCodeParameter = productSKUCode != null ?
                new ObjectParameter("ProductSKUCode", productSKUCode) :
                new ObjectParameter("ProductSKUCode", typeof(string));
    
            var ownerIDParameter = ownerID.HasValue ?
                new ObjectParameter("OwnerID", ownerID) :
                new ObjectParameter("OwnerID", typeof(int));
    
            var contractIDParameter = contractID.HasValue ?
                new ObjectParameter("ContractID", contractID) :
                new ObjectParameter("ContractID", typeof(int));
    
            var productNameParameter = productName != null ?
                new ObjectParameter("ProductName", productName) :
                new ObjectParameter("ProductName", typeof(string));
    
            var productDescriptionParameter = productDescription != null ?
                new ObjectParameter("ProductDescription", productDescription) :
                new ObjectParameter("ProductDescription", typeof(string));
    
            var dateInsertedParameter = dateInserted.HasValue ?
                new ObjectParameter("DateInserted", dateInserted) :
                new ObjectParameter("DateInserted", typeof(System.DateTime));
    
            var dateUpdatedParameter = dateUpdated.HasValue ?
                new ObjectParameter("DateUpdated", dateUpdated) :
                new ObjectParameter("DateUpdated", typeof(System.DateTime));
    
            var uSRParameter = uSR != null ?
                new ObjectParameter("USR", uSR) :
                new ObjectParameter("USR", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_ProductInsert_Result>("usp_ProductInsert", productSKUCodeParameter, ownerIDParameter, contractIDParameter, productNameParameter, productDescriptionParameter, dateInsertedParameter, dateUpdatedParameter, uSRParameter);
        }
    
        public virtual int usp_ProductInWatchListDelete(Nullable<int> memberID, Nullable<int> productID)
        {
            var memberIDParameter = memberID.HasValue ?
                new ObjectParameter("MemberID", memberID) :
                new ObjectParameter("MemberID", typeof(int));
    
            var productIDParameter = productID.HasValue ?
                new ObjectParameter("ProductID", productID) :
                new ObjectParameter("ProductID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_ProductInWatchListDelete", memberIDParameter, productIDParameter);
        }
    
        public virtual ObjectResult<usp_ProductInWatchListInsert_Result> usp_ProductInWatchListInsert(Nullable<int> memberID, Nullable<int> productID, Nullable<System.DateTime> dateInserted, Nullable<System.DateTime> dateUpdated, string uSR)
        {
            var memberIDParameter = memberID.HasValue ?
                new ObjectParameter("MemberID", memberID) :
                new ObjectParameter("MemberID", typeof(int));
    
            var productIDParameter = productID.HasValue ?
                new ObjectParameter("ProductID", productID) :
                new ObjectParameter("ProductID", typeof(int));
    
            var dateInsertedParameter = dateInserted.HasValue ?
                new ObjectParameter("DateInserted", dateInserted) :
                new ObjectParameter("DateInserted", typeof(System.DateTime));
    
            var dateUpdatedParameter = dateUpdated.HasValue ?
                new ObjectParameter("DateUpdated", dateUpdated) :
                new ObjectParameter("DateUpdated", typeof(System.DateTime));
    
            var uSRParameter = uSR != null ?
                new ObjectParameter("USR", uSR) :
                new ObjectParameter("USR", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_ProductInWatchListInsert_Result>("usp_ProductInWatchListInsert", memberIDParameter, productIDParameter, dateInsertedParameter, dateUpdatedParameter, uSRParameter);
        }
    
        public virtual ObjectResult<usp_ProductInWatchListSelect_Result> usp_ProductInWatchListSelect(Nullable<int> memberID, Nullable<int> productID)
        {
            var memberIDParameter = memberID.HasValue ?
                new ObjectParameter("MemberID", memberID) :
                new ObjectParameter("MemberID", typeof(int));
    
            var productIDParameter = productID.HasValue ?
                new ObjectParameter("ProductID", productID) :
                new ObjectParameter("ProductID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_ProductInWatchListSelect_Result>("usp_ProductInWatchListSelect", memberIDParameter, productIDParameter);
        }
    
        public virtual ObjectResult<usp_ProductInWatchListUpdate_Result> usp_ProductInWatchListUpdate(Nullable<int> memberID, Nullable<int> productID, Nullable<System.DateTime> dateInserted, Nullable<System.DateTime> dateUpdated, string uSR)
        {
            var memberIDParameter = memberID.HasValue ?
                new ObjectParameter("MemberID", memberID) :
                new ObjectParameter("MemberID", typeof(int));
    
            var productIDParameter = productID.HasValue ?
                new ObjectParameter("ProductID", productID) :
                new ObjectParameter("ProductID", typeof(int));
    
            var dateInsertedParameter = dateInserted.HasValue ?
                new ObjectParameter("DateInserted", dateInserted) :
                new ObjectParameter("DateInserted", typeof(System.DateTime));
    
            var dateUpdatedParameter = dateUpdated.HasValue ?
                new ObjectParameter("DateUpdated", dateUpdated) :
                new ObjectParameter("DateUpdated", typeof(System.DateTime));
    
            var uSRParameter = uSR != null ?
                new ObjectParameter("USR", uSR) :
                new ObjectParameter("USR", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_ProductInWatchListUpdate_Result>("usp_ProductInWatchListUpdate", memberIDParameter, productIDParameter, dateInsertedParameter, dateUpdatedParameter, uSRParameter);
        }
    
        public virtual int usp_ProductLocationDelete(Nullable<int> productLocationID)
        {
            var productLocationIDParameter = productLocationID.HasValue ?
                new ObjectParameter("ProductLocationID", productLocationID) :
                new ObjectParameter("ProductLocationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_ProductLocationDelete", productLocationIDParameter);
        }
    
        public virtual int usp_ProductLocationInsert(Nullable<int> productID, Nullable<int> gameID, Nullable<int> adressID, Nullable<System.DateTime> dateInserted, Nullable<System.DateTime> dateUpdated, string uSR)
        {
            var productIDParameter = productID.HasValue ?
                new ObjectParameter("ProductID", productID) :
                new ObjectParameter("ProductID", typeof(int));
    
            var gameIDParameter = gameID.HasValue ?
                new ObjectParameter("GameID", gameID) :
                new ObjectParameter("GameID", typeof(int));
    
            var adressIDParameter = adressID.HasValue ?
                new ObjectParameter("AdressID", adressID) :
                new ObjectParameter("AdressID", typeof(int));
    
            var dateInsertedParameter = dateInserted.HasValue ?
                new ObjectParameter("DateInserted", dateInserted) :
                new ObjectParameter("DateInserted", typeof(System.DateTime));
    
            var dateUpdatedParameter = dateUpdated.HasValue ?
                new ObjectParameter("DateUpdated", dateUpdated) :
                new ObjectParameter("DateUpdated", typeof(System.DateTime));
    
            var uSRParameter = uSR != null ?
                new ObjectParameter("USR", uSR) :
                new ObjectParameter("USR", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_ProductLocationInsert", productIDParameter, gameIDParameter, adressIDParameter, dateInsertedParameter, dateUpdatedParameter, uSRParameter);
        }
    
        public virtual int usp_ProductLocationSelect(Nullable<int> productLocationID)
        {
            var productLocationIDParameter = productLocationID.HasValue ?
                new ObjectParameter("ProductLocationID", productLocationID) :
                new ObjectParameter("ProductLocationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_ProductLocationSelect", productLocationIDParameter);
        }
    
        public virtual int usp_ProductLocationUpdate(Nullable<int> productLocationID, Nullable<int> productID, Nullable<int> gameID, Nullable<int> adressID, Nullable<System.DateTime> dateInserted, Nullable<System.DateTime> dateUpdated, string uSR)
        {
            var productLocationIDParameter = productLocationID.HasValue ?
                new ObjectParameter("ProductLocationID", productLocationID) :
                new ObjectParameter("ProductLocationID", typeof(int));
    
            var productIDParameter = productID.HasValue ?
                new ObjectParameter("ProductID", productID) :
                new ObjectParameter("ProductID", typeof(int));
    
            var gameIDParameter = gameID.HasValue ?
                new ObjectParameter("GameID", gameID) :
                new ObjectParameter("GameID", typeof(int));
    
            var adressIDParameter = adressID.HasValue ?
                new ObjectParameter("AdressID", adressID) :
                new ObjectParameter("AdressID", typeof(int));
    
            var dateInsertedParameter = dateInserted.HasValue ?
                new ObjectParameter("DateInserted", dateInserted) :
                new ObjectParameter("DateInserted", typeof(System.DateTime));
    
            var dateUpdatedParameter = dateUpdated.HasValue ?
                new ObjectParameter("DateUpdated", dateUpdated) :
                new ObjectParameter("DateUpdated", typeof(System.DateTime));
    
            var uSRParameter = uSR != null ?
                new ObjectParameter("USR", uSR) :
                new ObjectParameter("USR", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_ProductLocationUpdate", productLocationIDParameter, productIDParameter, gameIDParameter, adressIDParameter, dateInsertedParameter, dateUpdatedParameter, uSRParameter);
        }
    
        public virtual ObjectResult<usp_ProductSelect_Result> usp_ProductSelect(Nullable<int> productID)
        {
            var productIDParameter = productID.HasValue ?
                new ObjectParameter("ProductID", productID) :
                new ObjectParameter("ProductID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_ProductSelect_Result>("usp_ProductSelect", productIDParameter);
        }
    
        public virtual ObjectResult<usp_ProductUpdate_Result> usp_ProductUpdate(Nullable<int> productID, string productSKUCode, Nullable<int> ownerID, Nullable<int> contractID, string productName, string productDescription, Nullable<System.DateTime> dateInserted, Nullable<System.DateTime> dateUpdated, string uSR)
        {
            var productIDParameter = productID.HasValue ?
                new ObjectParameter("ProductID", productID) :
                new ObjectParameter("ProductID", typeof(int));
    
            var productSKUCodeParameter = productSKUCode != null ?
                new ObjectParameter("ProductSKUCode", productSKUCode) :
                new ObjectParameter("ProductSKUCode", typeof(string));
    
            var ownerIDParameter = ownerID.HasValue ?
                new ObjectParameter("OwnerID", ownerID) :
                new ObjectParameter("OwnerID", typeof(int));
    
            var contractIDParameter = contractID.HasValue ?
                new ObjectParameter("ContractID", contractID) :
                new ObjectParameter("ContractID", typeof(int));
    
            var productNameParameter = productName != null ?
                new ObjectParameter("ProductName", productName) :
                new ObjectParameter("ProductName", typeof(string));
    
            var productDescriptionParameter = productDescription != null ?
                new ObjectParameter("ProductDescription", productDescription) :
                new ObjectParameter("ProductDescription", typeof(string));
    
            var dateInsertedParameter = dateInserted.HasValue ?
                new ObjectParameter("DateInserted", dateInserted) :
                new ObjectParameter("DateInserted", typeof(System.DateTime));
    
            var dateUpdatedParameter = dateUpdated.HasValue ?
                new ObjectParameter("DateUpdated", dateUpdated) :
                new ObjectParameter("DateUpdated", typeof(System.DateTime));
    
            var uSRParameter = uSR != null ?
                new ObjectParameter("USR", uSR) :
                new ObjectParameter("USR", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_ProductUpdate_Result>("usp_ProductUpdate", productIDParameter, productSKUCodeParameter, ownerIDParameter, contractIDParameter, productNameParameter, productDescriptionParameter, dateInsertedParameter, dateUpdatedParameter, uSRParameter);
        }
    
        public virtual int usp_TerritoryDefinitionDelete(Nullable<int> territoryDefinitionID)
        {
            var territoryDefinitionIDParameter = territoryDefinitionID.HasValue ?
                new ObjectParameter("TerritoryDefinitionID", territoryDefinitionID) :
                new ObjectParameter("TerritoryDefinitionID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_TerritoryDefinitionDelete", territoryDefinitionIDParameter);
        }
    
        public virtual ObjectResult<usp_TerritoryDefinitionInsert_Result> usp_TerritoryDefinitionInsert(string territoryDefinitionCode, Nullable<int> territoryID, string zipOrPostalCode, string iPAddress, string physicalCoordinates, Nullable<System.DateTime> dateInserted, Nullable<System.DateTime> dateUpdated, string uSR)
        {
            var territoryDefinitionCodeParameter = territoryDefinitionCode != null ?
                new ObjectParameter("TerritoryDefinitionCode", territoryDefinitionCode) :
                new ObjectParameter("TerritoryDefinitionCode", typeof(string));
    
            var territoryIDParameter = territoryID.HasValue ?
                new ObjectParameter("TerritoryID", territoryID) :
                new ObjectParameter("TerritoryID", typeof(int));
    
            var zipOrPostalCodeParameter = zipOrPostalCode != null ?
                new ObjectParameter("ZipOrPostalCode", zipOrPostalCode) :
                new ObjectParameter("ZipOrPostalCode", typeof(string));
    
            var iPAddressParameter = iPAddress != null ?
                new ObjectParameter("IPAddress", iPAddress) :
                new ObjectParameter("IPAddress", typeof(string));
    
            var physicalCoordinatesParameter = physicalCoordinates != null ?
                new ObjectParameter("PhysicalCoordinates", physicalCoordinates) :
                new ObjectParameter("PhysicalCoordinates", typeof(string));
    
            var dateInsertedParameter = dateInserted.HasValue ?
                new ObjectParameter("DateInserted", dateInserted) :
                new ObjectParameter("DateInserted", typeof(System.DateTime));
    
            var dateUpdatedParameter = dateUpdated.HasValue ?
                new ObjectParameter("DateUpdated", dateUpdated) :
                new ObjectParameter("DateUpdated", typeof(System.DateTime));
    
            var uSRParameter = uSR != null ?
                new ObjectParameter("USR", uSR) :
                new ObjectParameter("USR", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_TerritoryDefinitionInsert_Result>("usp_TerritoryDefinitionInsert", territoryDefinitionCodeParameter, territoryIDParameter, zipOrPostalCodeParameter, iPAddressParameter, physicalCoordinatesParameter, dateInsertedParameter, dateUpdatedParameter, uSRParameter);
        }
    
        public virtual ObjectResult<usp_TerritoryDefinitionSelect_Result> usp_TerritoryDefinitionSelect(Nullable<int> territoryDefinitionID)
        {
            var territoryDefinitionIDParameter = territoryDefinitionID.HasValue ?
                new ObjectParameter("TerritoryDefinitionID", territoryDefinitionID) :
                new ObjectParameter("TerritoryDefinitionID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_TerritoryDefinitionSelect_Result>("usp_TerritoryDefinitionSelect", territoryDefinitionIDParameter);
        }
    
        public virtual ObjectResult<usp_TerritoryDefinitionUpdate_Result> usp_TerritoryDefinitionUpdate(Nullable<int> territoryDefinitionID, string territoryDefinitionCode, Nullable<int> territoryID, string zipOrPostalCode, string iPAddress, string physicalCoordinates, Nullable<System.DateTime> dateInserted, Nullable<System.DateTime> dateUpdated, string uSR)
        {
            var territoryDefinitionIDParameter = territoryDefinitionID.HasValue ?
                new ObjectParameter("TerritoryDefinitionID", territoryDefinitionID) :
                new ObjectParameter("TerritoryDefinitionID", typeof(int));
    
            var territoryDefinitionCodeParameter = territoryDefinitionCode != null ?
                new ObjectParameter("TerritoryDefinitionCode", territoryDefinitionCode) :
                new ObjectParameter("TerritoryDefinitionCode", typeof(string));
    
            var territoryIDParameter = territoryID.HasValue ?
                new ObjectParameter("TerritoryID", territoryID) :
                new ObjectParameter("TerritoryID", typeof(int));
    
            var zipOrPostalCodeParameter = zipOrPostalCode != null ?
                new ObjectParameter("ZipOrPostalCode", zipOrPostalCode) :
                new ObjectParameter("ZipOrPostalCode", typeof(string));
    
            var iPAddressParameter = iPAddress != null ?
                new ObjectParameter("IPAddress", iPAddress) :
                new ObjectParameter("IPAddress", typeof(string));
    
            var physicalCoordinatesParameter = physicalCoordinates != null ?
                new ObjectParameter("PhysicalCoordinates", physicalCoordinates) :
                new ObjectParameter("PhysicalCoordinates", typeof(string));
    
            var dateInsertedParameter = dateInserted.HasValue ?
                new ObjectParameter("DateInserted", dateInserted) :
                new ObjectParameter("DateInserted", typeof(System.DateTime));
    
            var dateUpdatedParameter = dateUpdated.HasValue ?
                new ObjectParameter("DateUpdated", dateUpdated) :
                new ObjectParameter("DateUpdated", typeof(System.DateTime));
    
            var uSRParameter = uSR != null ?
                new ObjectParameter("USR", uSR) :
                new ObjectParameter("USR", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_TerritoryDefinitionUpdate_Result>("usp_TerritoryDefinitionUpdate", territoryDefinitionIDParameter, territoryDefinitionCodeParameter, territoryIDParameter, zipOrPostalCodeParameter, iPAddressParameter, physicalCoordinatesParameter, dateInsertedParameter, dateUpdatedParameter, uSRParameter);
        }
    
        public virtual int usp_TerritoryDelete(Nullable<int> territoryID)
        {
            var territoryIDParameter = territoryID.HasValue ?
                new ObjectParameter("TerritoryID", territoryID) :
                new ObjectParameter("TerritoryID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_TerritoryDelete", territoryIDParameter);
        }
    
        public virtual ObjectResult<usp_TerritoryInsert_Result> usp_TerritoryInsert(string territoryCode, Nullable<int> ownerID, Nullable<int> contractID, string territoryName, string territoryDescription, Nullable<System.DateTime> dateInserted, Nullable<System.DateTime> dateUpdated, string uSR)
        {
            var territoryCodeParameter = territoryCode != null ?
                new ObjectParameter("TerritoryCode", territoryCode) :
                new ObjectParameter("TerritoryCode", typeof(string));
    
            var ownerIDParameter = ownerID.HasValue ?
                new ObjectParameter("OwnerID", ownerID) :
                new ObjectParameter("OwnerID", typeof(int));
    
            var contractIDParameter = contractID.HasValue ?
                new ObjectParameter("ContractID", contractID) :
                new ObjectParameter("ContractID", typeof(int));
    
            var territoryNameParameter = territoryName != null ?
                new ObjectParameter("TerritoryName", territoryName) :
                new ObjectParameter("TerritoryName", typeof(string));
    
            var territoryDescriptionParameter = territoryDescription != null ?
                new ObjectParameter("TerritoryDescription", territoryDescription) :
                new ObjectParameter("TerritoryDescription", typeof(string));
    
            var dateInsertedParameter = dateInserted.HasValue ?
                new ObjectParameter("DateInserted", dateInserted) :
                new ObjectParameter("DateInserted", typeof(System.DateTime));
    
            var dateUpdatedParameter = dateUpdated.HasValue ?
                new ObjectParameter("DateUpdated", dateUpdated) :
                new ObjectParameter("DateUpdated", typeof(System.DateTime));
    
            var uSRParameter = uSR != null ?
                new ObjectParameter("USR", uSR) :
                new ObjectParameter("USR", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_TerritoryInsert_Result>("usp_TerritoryInsert", territoryCodeParameter, ownerIDParameter, contractIDParameter, territoryNameParameter, territoryDescriptionParameter, dateInsertedParameter, dateUpdatedParameter, uSRParameter);
        }
    
        public virtual ObjectResult<usp_TerritorySelect_Result> usp_TerritorySelect(Nullable<int> territoryID)
        {
            var territoryIDParameter = territoryID.HasValue ?
                new ObjectParameter("TerritoryID", territoryID) :
                new ObjectParameter("TerritoryID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_TerritorySelect_Result>("usp_TerritorySelect", territoryIDParameter);
        }
    
        public virtual ObjectResult<usp_TerritoryUpdate_Result> usp_TerritoryUpdate(Nullable<int> territoryID, string territoryCode, Nullable<int> ownerID, Nullable<int> contractID, string territoryName, string territoryDescription, Nullable<System.DateTime> dateInserted, Nullable<System.DateTime> dateUpdated, string uSR)
        {
            var territoryIDParameter = territoryID.HasValue ?
                new ObjectParameter("TerritoryID", territoryID) :
                new ObjectParameter("TerritoryID", typeof(int));
    
            var territoryCodeParameter = territoryCode != null ?
                new ObjectParameter("TerritoryCode", territoryCode) :
                new ObjectParameter("TerritoryCode", typeof(string));
    
            var ownerIDParameter = ownerID.HasValue ?
                new ObjectParameter("OwnerID", ownerID) :
                new ObjectParameter("OwnerID", typeof(int));
    
            var contractIDParameter = contractID.HasValue ?
                new ObjectParameter("ContractID", contractID) :
                new ObjectParameter("ContractID", typeof(int));
    
            var territoryNameParameter = territoryName != null ?
                new ObjectParameter("TerritoryName", territoryName) :
                new ObjectParameter("TerritoryName", typeof(string));
    
            var territoryDescriptionParameter = territoryDescription != null ?
                new ObjectParameter("TerritoryDescription", territoryDescription) :
                new ObjectParameter("TerritoryDescription", typeof(string));
    
            var dateInsertedParameter = dateInserted.HasValue ?
                new ObjectParameter("DateInserted", dateInserted) :
                new ObjectParameter("DateInserted", typeof(System.DateTime));
    
            var dateUpdatedParameter = dateUpdated.HasValue ?
                new ObjectParameter("DateUpdated", dateUpdated) :
                new ObjectParameter("DateUpdated", typeof(System.DateTime));
    
            var uSRParameter = uSR != null ?
                new ObjectParameter("USR", uSR) :
                new ObjectParameter("USR", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_TerritoryUpdate_Result>("usp_TerritoryUpdate", territoryIDParameter, territoryCodeParameter, ownerIDParameter, contractIDParameter, territoryNameParameter, territoryDescriptionParameter, dateInsertedParameter, dateUpdatedParameter, uSRParameter);
        }
    
        public virtual int usp_WebsiteInteractionDelete(Nullable<int> websiteInteractionID)
        {
            var websiteInteractionIDParameter = websiteInteractionID.HasValue ?
                new ObjectParameter("WebsiteInteractionID", websiteInteractionID) :
                new ObjectParameter("WebsiteInteractionID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_WebsiteInteractionDelete", websiteInteractionIDParameter);
        }
    
        public virtual ObjectResult<usp_WebsiteInteractionInsert_Result> usp_WebsiteInteractionInsert(Nullable<int> websiteInteractionID, Nullable<int> memberID, Nullable<int> interactionTypeID, Nullable<System.DateTime> dateInserted, Nullable<System.DateTime> dateUpdated, string uSR)
        {
            var websiteInteractionIDParameter = websiteInteractionID.HasValue ?
                new ObjectParameter("WebsiteInteractionID", websiteInteractionID) :
                new ObjectParameter("WebsiteInteractionID", typeof(int));
    
            var memberIDParameter = memberID.HasValue ?
                new ObjectParameter("MemberID", memberID) :
                new ObjectParameter("MemberID", typeof(int));
    
            var interactionTypeIDParameter = interactionTypeID.HasValue ?
                new ObjectParameter("InteractionTypeID", interactionTypeID) :
                new ObjectParameter("InteractionTypeID", typeof(int));
    
            var dateInsertedParameter = dateInserted.HasValue ?
                new ObjectParameter("DateInserted", dateInserted) :
                new ObjectParameter("DateInserted", typeof(System.DateTime));
    
            var dateUpdatedParameter = dateUpdated.HasValue ?
                new ObjectParameter("DateUpdated", dateUpdated) :
                new ObjectParameter("DateUpdated", typeof(System.DateTime));
    
            var uSRParameter = uSR != null ?
                new ObjectParameter("USR", uSR) :
                new ObjectParameter("USR", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_WebsiteInteractionInsert_Result>("usp_WebsiteInteractionInsert", websiteInteractionIDParameter, memberIDParameter, interactionTypeIDParameter, dateInsertedParameter, dateUpdatedParameter, uSRParameter);
        }
    
        public virtual ObjectResult<usp_WebsiteInteractionSelect_Result> usp_WebsiteInteractionSelect(Nullable<int> websiteInteractionID)
        {
            var websiteInteractionIDParameter = websiteInteractionID.HasValue ?
                new ObjectParameter("WebsiteInteractionID", websiteInteractionID) :
                new ObjectParameter("WebsiteInteractionID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_WebsiteInteractionSelect_Result>("usp_WebsiteInteractionSelect", websiteInteractionIDParameter);
        }
    
        public virtual ObjectResult<usp_WebsiteInteractionUpdate_Result> usp_WebsiteInteractionUpdate(Nullable<int> websiteInteractionID, Nullable<int> memberID, Nullable<int> interactionTypeID, Nullable<System.DateTime> dateInserted, Nullable<System.DateTime> dateUpdated, string uSR)
        {
            var websiteInteractionIDParameter = websiteInteractionID.HasValue ?
                new ObjectParameter("WebsiteInteractionID", websiteInteractionID) :
                new ObjectParameter("WebsiteInteractionID", typeof(int));
    
            var memberIDParameter = memberID.HasValue ?
                new ObjectParameter("MemberID", memberID) :
                new ObjectParameter("MemberID", typeof(int));
    
            var interactionTypeIDParameter = interactionTypeID.HasValue ?
                new ObjectParameter("InteractionTypeID", interactionTypeID) :
                new ObjectParameter("InteractionTypeID", typeof(int));
    
            var dateInsertedParameter = dateInserted.HasValue ?
                new ObjectParameter("DateInserted", dateInserted) :
                new ObjectParameter("DateInserted", typeof(System.DateTime));
    
            var dateUpdatedParameter = dateUpdated.HasValue ?
                new ObjectParameter("DateUpdated", dateUpdated) :
                new ObjectParameter("DateUpdated", typeof(System.DateTime));
    
            var uSRParameter = uSR != null ?
                new ObjectParameter("USR", uSR) :
                new ObjectParameter("USR", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_WebsiteInteractionUpdate_Result>("usp_WebsiteInteractionUpdate", websiteInteractionIDParameter, memberIDParameter, interactionTypeIDParameter, dateInsertedParameter, dateUpdatedParameter, uSRParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> MakeGame(Nullable<int> memberID)
        {
            var memberIDParameter = memberID.HasValue ?
                new ObjectParameter("memberID", memberID) :
                new ObjectParameter("memberID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("MakeGame", memberIDParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> MakeANewGame(Nullable<int> memberID)
        {
            var memberIDParameter = memberID.HasValue ?
                new ObjectParameter("memberID", memberID) :
                new ObjectParameter("memberID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("MakeANewGame", memberIDParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> MakeANewGame2(Nullable<int> memberID)
        {
            var memberIDParameter = memberID.HasValue ?
                new ObjectParameter("memberID", memberID) :
                new ObjectParameter("memberID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("MakeANewGame2", memberIDParameter);
        }
    
        public virtual int MakeGameRules(Nullable<int> gameTypeID, Nullable<int> gameID, string userName)
        {
            var gameTypeIDParameter = gameTypeID.HasValue ?
                new ObjectParameter("GameTypeID", gameTypeID) :
                new ObjectParameter("GameTypeID", typeof(int));
    
            var gameIDParameter = gameID.HasValue ?
                new ObjectParameter("GameID", gameID) :
                new ObjectParameter("GameID", typeof(int));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("MakeGameRules", gameTypeIDParameter, gameIDParameter, userNameParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> FindComingSoonGames(Nullable<int> memberId)
        {
            var memberIdParameter = memberId.HasValue ?
                new ObjectParameter("memberId", memberId) :
                new ObjectParameter("memberId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("FindComingSoonGames", memberIdParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> GetMissingGames(Nullable<int> memberId)
        {
            var memberIdParameter = memberId.HasValue ?
                new ObjectParameter("MemberId", memberId) :
                new ObjectParameter("MemberId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("GetMissingGames", memberIdParameter);
        }
    
        public virtual ObjectResult<getMembersInGame_Result> getMembersInGame(Nullable<int> gameID)
        {
            var gameIDParameter = gameID.HasValue ?
                new ObjectParameter("GameID", gameID) :
                new ObjectParameter("GameID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<getMembersInGame_Result>("getMembersInGame", gameIDParameter);
        }
    
        public virtual ObjectResult<Nullable<double>> GetMaxTransactionTime(Nullable<int> gameID)
        {
            var gameIDParameter = gameID.HasValue ?
                new ObjectParameter("GameID", gameID) :
                new ObjectParameter("GameID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<double>>("GetMaxTransactionTime", gameIDParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> IsUserWinner(Nullable<int> gameID, Nullable<int> memberId)
        {
            var gameIDParameter = gameID.HasValue ?
                new ObjectParameter("GameID", gameID) :
                new ObjectParameter("GameID", typeof(int));
    
            var memberIdParameter = memberId.HasValue ?
                new ObjectParameter("memberId", memberId) :
                new ObjectParameter("memberId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("IsUserWinner", gameIDParameter, memberIdParameter);
        }
    
        public virtual int PersistUserInteraction(Nullable<int> productInGameID, Nullable<int> memberInGameID, Nullable<int> offSet)
        {
            var productInGameIDParameter = productInGameID.HasValue ?
                new ObjectParameter("ProductInGameID", productInGameID) :
                new ObjectParameter("ProductInGameID", typeof(int));
    
            var memberInGameIDParameter = memberInGameID.HasValue ?
                new ObjectParameter("memberInGameID", memberInGameID) :
                new ObjectParameter("memberInGameID", typeof(int));
    
            var offSetParameter = offSet.HasValue ?
                new ObjectParameter("OffSet", offSet) :
                new ObjectParameter("OffSet", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("PersistUserInteraction", productInGameIDParameter, memberInGameIDParameter, offSetParameter);
        }
    
        public virtual int UpdateWinIndictor(Nullable<int> productPlayedID, Nullable<int> winner)
        {
            var productPlayedIDParameter = productPlayedID.HasValue ?
                new ObjectParameter("productPlayedID", productPlayedID) :
                new ObjectParameter("productPlayedID", typeof(int));
    
            var winnerParameter = winner.HasValue ?
                new ObjectParameter("winner", winner) :
                new ObjectParameter("winner", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateWinIndictor", productPlayedIDParameter, winnerParameter);
        }
    }
}
